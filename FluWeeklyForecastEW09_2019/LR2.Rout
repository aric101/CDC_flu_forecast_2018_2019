
R version 3.2.3 (2015-12-10) -- "Wooden Christmas-Tree"
Copyright (C) 2015 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> ########################################################
> ############# Data Loading  ##############################
> ##########################################################
> rm(list=ls())
> week2season <- function(k)c((40:53),(1:39))[k]
> week2season(5)
[1] 44
> 
> system("ls ./data/*.csv")
./data/ILINetCA.csv
./data/ILINet.csv
./data/ILINetHHS.csv
./data/national1-4wk.forecast.template.csv
./data/national.onset.wk.forecast.template.csv
./data/national.pk.prev.forecast.template.csv
./data/national.pk.wk.forecast.template.csv
./data/wILI_Baseline.csv
> 
> flu.data <- read.csv("./data/ILINet.csv", header=F)[-(1:2),]
> names(flu.data) <- as.character(read.csv("./data/ILINet.csv", header=F, colClasses="character")[2,])
> names(flu.data)[5] <- "ILI"
> head(flu.data)
  REGION TYPE REGION YEAR WEEK     ILI %UNWEIGHTED ILI AGE 0-4 AGE 25-49
3    National      X 1997   40 1.10148         1.21686     179         X
4    National      X 1997   41 1.20007         1.28064     199         X
5    National      X 1997   42 1.37876         1.23906     228         X
6    National      X 1997   43  1.1992         1.14473     188         X
7    National      X 1997   44 1.65618         1.26112     217         X
8    National      X 1997   45 1.41326         1.28275     178         X
  AGE 25-64 AGE 5-24 AGE 50-64 AGE 65 ILITOTAL NUM. OF PROVIDERS TOTAL PATIENTS
3       157      205         X     29      570               192          46842
4       151      242         X     23      615               191          48023
5       153      266         X     34      681               219          54961
6       193      236         X     36      653               213          57044
7       162      280         X     41      700               213          55506
8       148      281         X     48      655               195          51062
> tail(flu.data)
     REGION TYPE REGION YEAR WEEK     ILI %UNWEIGHTED ILI AGE 0-4 AGE 25-49
1115    National      X 2019    4 3.79197         3.90228   10655     11239
1116    National      X 2019    5 4.31595         4.54359   11450     12994
1117    National      X 2019    6 4.83215         5.22628   13676     15687
1118    National      X 2019    7 5.04239         5.48438   13998     15835
1119    National      X 2019    8 4.93166         5.37644   13267     15642
1120    National      X 2019    9 4.69796         4.78645   10847     13377
     AGE 25-64 AGE 5-24 AGE 50-64 AGE 65 ILITOTAL NUM. OF PROVIDERS
1115         X    16796      4479   2864    46033              2648
1116         X    21935      5101   3256    54736              2621
1117         X    29403      6165   4071    69002              2612
1118         X    28909      6282   4197    69221              2556
1119         X    26072      6082   4339    65402              2500
1120         X    21987      5484   3922    55617              2289
     TOTAL PATIENTS
1115        1179645
1116        1204687
1117        1320288
1118        1262147
1119        1216456
1120        1161968
> #flu.data <- flu.data[-which(flu.data$ILI=="X"),]
> 
> flu.data$ILI <- as.numeric(as.character(flu.data$ILI))
> flu.data$YEAR <- as.numeric(as.character(flu.data$YEAR))
> flu.data$WEEK <- as.numeric(as.character(flu.data$WEEK))
> #flu.data$ILI <- signif(flu.data$ILI,2)
> 
> flu.data.wk.prev <- flu.data[,c("YEAR","WEEK","ILI")]
> flu.data.wk.prev$WEEK <- flu.data.wk.prev$WEEK - 39
> flu.data.wk.prev$YEAR[flu.data.wk.prev$WEEK<=0] <- flu.data.wk.prev$YEAR[flu.data.wk.prev$WEEK<=0] -1
> flu.data.wk.prev$WEEK[flu.data.wk.prev$WEEK<=0] <- flu.data.wk.prev$WEEK[flu.data.wk.prev$WEEK<=0] + 53
> tail(flu.data.wk.prev)
     YEAR WEEK     ILI
1115 2018   18 3.79197
1116 2018   19 4.31595
1117 2018   20 4.83215
1118 2018   21 5.04239
1119 2018   22 4.93166
1120 2018   23 4.69796
> 
> flu.data.yr.prev <- flu.data[,c("YEAR","WEEK","ILI")]
> flu.data.yr.prev$WEEK <- flu.data.yr.prev$WEEK - 39
> flu.data.yr.prev$YEAR[flu.data.yr.prev$WEEK<=0] <- flu.data.yr.prev$YEAR[flu.data.yr.prev$WEEK<=0] -1
> flu.data.yr.prev$WEEK[flu.data.yr.prev$WEEK<=0] <- flu.data.yr.prev$WEEK[flu.data.yr.prev$WEEK<=0] + 53
> head(flu.data.yr.prev)
  YEAR WEEK     ILI
3 1997    1 1.10148
4 1997    2 1.20007
5 1997    3 1.37876
6 1997    4 1.19920
7 1997    5 1.65618
8 1997    6 1.41326
> flu.data.yr.prev <- flu.data.yr.prev[-nrow(flu.data.yr.prev), ]
> #flu.data.yr.prev <- flu.data.yr.prev[flu.data.yr.prev$YEAR<2016, ]
> flu.data.yr.prev
     YEAR WEEK      ILI
3    1997    1 1.101480
4    1997    2 1.200070
5    1997    3 1.378760
6    1997    4 1.199200
7    1997    5 1.656180
8    1997    6 1.413260
9    1997    7 1.986800
10   1997    8 2.447490
11   1997    9 1.739010
12   1997   10 1.939190
13   1997   11 2.281660
14   1997   12 2.507610
15   1997   13 4.113520
16   1997   14 5.623720
17   1997   15 4.373980
18   1997   16 4.194340
19   1997   17 5.421230
20   1997   18 5.661370
21   1997   19 5.978020
22   1997   20 4.735800
23   1997   21 3.445810
24   1997   22 2.477990
25   1997   23 1.657320
26   1997   24 1.969520
27   1997   25 1.585450
28   1997   26 1.804740
29   1997   27 1.046240
30   1997   28 1.400400
31   1997   29 0.796870
32   1997   30 0.717097
33   1997   31 1.002380
34   1997   32 0.908403
35   1997   33 0.443014
36   1997   34 0.638986
37   1997   35 0.000000
38   1997   36 0.000000
39   1997   37 0.000000
40   1997   38 0.000000
41   1997   39 0.000000
42   1997   40 0.000000
43   1997   41 0.000000
44   1997   42 0.000000
45   1997   43 0.000000
46   1997   44 0.000000
47   1997   45 0.000000
48   1997   46 0.000000
49   1997   47 0.000000
50   1997   48 0.000000
51   1997   49 0.000000
52   1997   50 0.000000
53   1997   51 0.000000
54   1997   52 0.000000
55   1997   53 0.000000
56   1998    1 1.577330
57   1998    2 1.308800
58   1998    3 1.417440
59   1998    4 1.182720
60   1998    5 2.334320
61   1998    6 1.815770
62   1998    7 2.179750
63   1998    8 2.112400
64   1998    9 2.048540
65   1998   10 1.932480
66   1998   11 1.904680
67   1998   12 2.559830
68   1998   13 3.991080
69   1998   15 3.085810
70   1998   16 4.163830
71   1998   17 5.580490
72   1998   18 5.253280
73   1998   19 6.746670
74   1998   20 7.571880
75   1998   21 6.872870
76   1998   22 6.350980
77   1998   23 5.410990
78   1998   24 4.550080
79   1998   25 3.859150
80   1998   26 2.996010
81   1998   27 1.978140
82   1998   28 1.168870
83   1998   29 1.093020
84   1998   30 0.633169
85   1998   31 0.639561
86   1998   32 1.555310
87   1998   33 0.808020
88   1998   34 1.339970
89   1998   35 0.000000
90   1998   36 0.000000
91   1998   37 0.000000
92   1998   38 0.000000
93   1998   39 0.000000
94   1998   40 0.000000
95   1998   41 0.000000
96   1998   42 0.000000
97   1998   43 0.000000
98   1998   44 0.000000
99   1998   45 0.000000
100  1998   46 0.000000
101  1998   47 0.000000
102  1998   48 0.000000
103  1998   49 0.000000
104  1998   50 0.000000
105  1998   51 0.000000
106  1998   52 0.000000
107  1998   53 0.000000
108  1999    1 0.831219
109  1999    2 1.404450
110  1999    3 1.317210
111  1999    4 1.381610
112  1999    5 1.416070
113  1999    6 1.484380
114  1999    7 1.526140
115  1999    8 1.853360
116  1999    9 2.329070
117  1999   10 2.702540
118  1999   11 3.504540
119  1999   12 5.407990
120  1999   13 7.042280
121  1999   15 6.768460
122  1999   16 5.528080
123  1999   17 3.805080
124  1999   18 3.411770
125  1999   19 2.400000
126  1999   20 1.891200
127  1999   21 1.355030
128  1999   22 1.332120
129  1999   23 1.491270
130  1999   24 1.268260
131  1999   25 1.058540
132  1999   26 0.922010
133  1999   27 0.892334
134  1999   28 0.929201
135  1999   29 0.655592
136  1999   30 0.607002
137  1999   31 0.600003
138  1999   32 0.547247
139  1999   33 0.476417
140  1999   34 0.445917
141  1999   35 0.000000
142  1999   36 0.000000
143  1999   37 0.000000
144  1999   38 0.000000
145  1999   39 0.000000
146  1999   40 0.000000
147  1999   41 0.000000
148  1999   42 0.000000
149  1999   43 0.000000
150  1999   44 0.000000
151  1999   45 0.000000
152  1999   46 0.000000
153  1999   47 0.000000
154  1999   48 0.000000
155  1999   49 0.000000
156  1999   50 0.000000
157  1999   51 0.000000
158  1999   52 0.000000
159  1999   53 0.000000
160  2000    1 1.041130
161  2000    2 1.287100
162  2000    3 1.282990
163  2000    4 1.340810
164  2000    5 1.055500
165  2000    6 1.141360
166  2000    7 1.441110
167  2000    8 1.957350
168  2000    9 1.619280
169  2000   10 1.784400
170  2000   11 2.344230
171  2000   12 2.695280
172  2000   13 3.861800
173  2000   15 3.505000
174  2000   16 3.438040
175  2000   17 4.392800
176  2000   18 4.213390
177  2000   19 4.353640
178  2000   20 3.699690
179  2000   21 2.819210
180  2000   22 2.552940
181  2000   23 1.901670
182  2000   24 1.680330
183  2000   25 1.625400
184  2000   26 1.459570
185  2000   27 1.323760
186  2000   28 0.920073
187  2000   29 0.779257
188  2000   30 0.991303
189  2000   31 0.826930
190  2000   32 0.588952
191  2000   33 0.605586
192  2000   34 0.494340
193  2000   35 0.000000
194  2000   36 0.000000
195  2000   37 0.000000
196  2000   38 0.000000
197  2000   39 0.000000
198  2000   40 0.000000
199  2000   41 0.000000
200  2000   42 0.000000
201  2000   43 0.000000
202  2000   44 0.000000
203  2000   45 0.000000
204  2000   46 0.000000
205  2000   47 0.000000
206  2000   48 0.000000
207  2000   49 0.000000
208  2000   50 0.000000
209  2000   51 0.000000
210  2000   52 0.000000
211  2000   53 0.000000
212  2001    1 1.410460
213  2001    2 1.770190
214  2001    3 1.619040
215  2001    4 1.770650
216  2001    5 1.938910
217  2001    6 1.634390
218  2001    7 1.903630
219  2001    8 1.805560
220  2001    9 1.755060
221  2001   10 1.530230
222  2001   11 1.461610
223  2001   12 1.960480
224  2001   13 2.204350
225  2001   15 2.134800
226  2001   16 1.894410
227  2001   17 2.831090
228  2001   18 3.304810
229  2001   19 3.610630
230  2001   20 3.427990
231  2001   21 3.767150
232  2001   22 3.600180
233  2001   23 3.200240
234  2001   24 2.926330
235  2001   25 2.858570
236  2001   26 2.347450
237  2001   27 2.234980
238  2001   28 1.993550
239  2001   29 1.371680
240  2001   30 1.270330
241  2001   31 0.999331
242  2001   32 1.172000
243  2001   33 1.034720
244  2001   34 0.703599
245  2001   35 0.000000
246  2001   36 0.000000
247  2001   37 0.000000
248  2001   38 0.000000
249  2001   39 0.000000
250  2001   40 0.000000
251  2001   41 0.000000
252  2001   42 0.000000
253  2001   43 0.000000
254  2001   44 0.000000
255  2001   45 0.000000
256  2001   46 0.000000
257  2001   47 0.000000
258  2001   48 0.000000
259  2001   49 0.000000
260  2001   50 0.000000
261  2001   51 0.000000
262  2001   52 0.000000
263  2001   53 0.000000
264  2002    1 1.222620
265  2002    2 1.333440
266  2002    3 1.319290
267  2002    4 1.494840
268  2002    5 1.471950
269  2002    6 1.580940
270  2002    7 1.494260
271  2002    8 1.405690
272  2002    9 1.614100
273  2002   10 1.459670
274  2002   11 1.598960
275  2002   12 2.166970
276  2002   13 2.578420
277  2002   15 2.386360
278  2002   16 1.736210
279  2002   17 2.062960
280  2002   18 2.581130
281  2002   19 2.939090
282  2002   20 3.225390
283  2002   21 3.069820
284  2002   22 3.200440
285  2002   23 2.448880
286  2002   24 2.134400
287  2002   25 1.998660
288  2002   26 1.938490
289  2002   27 1.412930
290  2002   28 1.234720
291  2002   29 1.200050
292  2002   30 0.910135
293  2002   31 0.932265
294  2002   32 0.692175
295  2002   33 0.669406
296  2002   34 0.727705
297  2002   35 0.717701
298  2002   36 0.789394
299  2002   37 0.722129
300  2002   38 0.591326
301  2002   39 0.523070
302  2002   40 0.450236
303  2002   41 0.397421
304  2002   42 0.448002
305  2002   43 0.474767
306  2002   44 0.453251
307  2002   45 0.352158
308  2002   46 0.525322
309  2002   47 0.492991
310  2002   48 0.542728
311  2002   49 0.490347
312  2002   50 0.735914
313  2002   51 0.581771
314  2002   52 0.654162
315  2002   53 0.749504
316  2003    1 0.884021
317  2003    2 1.027730
318  2003    3 1.282960
319  2003    4 1.326610
320  2003    5 1.773040
321  2003    6 2.438140
322  2003    7 2.726050
323  2003    8 3.731920
324  2003    9 4.548940
325  2003   10 5.399060
326  2003   11 7.387350
327  2003   12 7.480970
328  2003   13 7.627970
329  2003   14 5.140510
330  2003   15 2.891290
331  2003   16 2.104290
332  2003   17 1.886960
333  2003   18 1.776600
334  2003   19 1.460010
335  2003   20 1.377870
336  2003   21 1.305320
337  2003   22 1.086910
338  2003   23 0.991888
339  2003   24 1.027650
340  2003   25 1.057900
341  2003   26 0.849361
342  2003   27 0.747127
343  2003   28 0.661708
344  2003   29 0.679514
345  2003   30 0.633071
346  2003   31 0.569894
347  2003   32 0.591357
348  2003   33 0.589044
349  2003   34 0.678640
350  2003   35 0.637558
351  2003   36 0.813309
352  2003   37 0.834551
353  2003   38 0.616174
354  2003   39 0.513286
355  2003   40 0.351881
356  2003   41 0.542621
357  2003   42 0.581036
358  2003   43 0.495486
359  2003   44 0.612090
360  2003   45 0.531491
361  2003   46 0.519987
362  2003   47 0.574476
363  2003   48 0.663175
364  2003   49 0.614691
365  2003   50 0.656823
366  2003   51 0.723016
367  2003   52 0.691857
368  2003   53 0.782758
369  2004    1 0.982275
370  2004    2 1.018210
371  2004    3 1.176800
372  2004    4 1.301210
373  2004    5 1.277460
374  2004    6 1.403870
375  2004    7 1.403010
376  2004    8 1.739750
377  2004    9 1.568940
378  2004   10 1.659270
379  2004   11 1.813410
380  2004   12 2.376260
381  2004   13 2.770520
382  2004   15 2.400640
383  2004   16 2.541550
384  2004   17 2.858710
385  2004   18 3.550110
386  2004   19 4.585910
387  2004   20 5.058090
388  2004   21 5.441510
389  2004   22 4.472900
390  2004   23 3.675200
391  2004   24 3.335300
392  2004   25 2.762240
393  2004   26 2.468440
394  2004   27 2.000810
395  2004   28 1.543190
396  2004   29 1.501950
397  2004   30 1.229180
398  2004   31 1.218540
399  2004   32 1.158320
400  2004   33 1.249000
401  2004   34 1.168880
402  2004   35 1.078880
403  2004   36 1.230590
404  2004   37 1.147470
405  2004   38 1.002540
406  2004   39 0.957569
407  2004   40 0.894837
408  2004   41 0.798205
409  2004   42 0.757812
410  2004   43 0.825963
411  2004   44 0.744927
412  2004   45 0.787049
413  2004   46 0.684724
414  2004   47 0.747361
415  2004   48 0.673974
416  2004   49 0.869662
417  2004   50 0.899529
418  2004   51 0.854635
419  2004   52 1.011230
420  2004   53 0.977808
421  2005    1 1.177780
422  2005    2 1.219470
423  2005    3 1.306900
424  2005    4 1.339310
425  2005    5 1.583740
426  2005    6 1.470720
427  2005    7 1.611200
428  2005    8 1.826990
429  2005    9 1.774820
430  2005   10 1.944510
431  2005   11 2.355120
432  2005   12 3.108780
433  2005   13 3.282380
434  2005   15 2.629140
435  2005   16 2.251500
436  2005   17 2.358580
437  2005   18 2.418810
438  2005   19 2.527520
439  2005   20 2.649540
440  2005   21 3.129350
441  2005   22 3.124420
442  2005   23 3.130990
443  2005   24 3.082610
444  2005   25 2.644310
445  2005   26 2.422950
446  2005   27 2.311410
447  2005   28 1.863830
448  2005   29 1.449430
449  2005   30 1.302270
450  2005   31 1.134590
451  2005   32 1.062550
452  2005   33 1.034280
453  2005   34 1.017910
454  2005   35 0.918151
455  2005   36 0.930990
456  2005   37 0.857294
457  2005   38 0.786294
458  2005   39 0.719426
459  2005   40 0.718868
460  2005   41 0.774807
461  2005   42 0.765980
462  2005   43 0.642809
463  2005   44 0.622033
464  2005   45 0.616326
465  2005   46 0.685694
466  2005   47 0.622697
467  2005   48 0.611817
468  2005   49 0.638831
469  2005   50 0.806627
470  2005   51 0.762448
471  2005   52 0.813406
472  2005   53 0.807934
473  2006    1 1.153840
474  2006    2 1.148190
475  2006    3 1.227360
476  2006    4 1.217440
477  2006    5 1.328130
478  2006    6 1.477540
479  2006    7 1.533900
480  2006    8 1.912690
481  2006    9 1.838000
482  2006   10 1.953760
483  2006   11 2.404070
484  2006   12 2.874530
485  2006   13 3.025970
486  2006   15 2.378170
487  2006   16 2.092320
488  2006   17 2.293960
489  2006   18 2.745010
490  2006   19 3.044340
491  2006   20 3.499990
492  2006   21 3.578510
493  2006   22 3.289790
494  2006   23 2.891490
495  2006   24 2.620750
496  2006   25 2.533870
497  2006   26 2.072510
498  2006   27 1.870840
499  2006   28 1.400420
500  2006   29 1.468870
501  2006   30 1.155140
502  2006   31 1.079010
503  2006   32 0.984920
504  2006   33 1.033250
505  2006   34 0.926649
506  2006   35 0.920100
507  2006   36 0.954094
508  2006   37 0.763278
509  2006   38 0.817220
510  2006   39 0.764586
511  2006   40 0.793127
512  2006   41 0.669090
513  2006   42 0.621150
514  2006   43 0.603659
515  2006   44 0.649058
516  2006   45 0.568338
517  2006   46 0.651546
518  2006   47 0.652176
519  2006   48 0.803849
520  2006   49 0.787458
521  2006   50 0.943263
522  2006   51 0.946932
523  2006   52 0.987146
524  2006   53 1.052060
525  2007    1 0.995184
526  2007    2 1.220030
527  2007    3 1.285480
528  2007    4 1.377500
529  2007    5 1.467250
530  2007    6 1.558410
531  2007    7 1.619580
532  2007    8 1.811200
533  2007    9 1.618650
534  2007   10 1.621240
535  2007   11 1.673510
536  2007   12 1.950960
537  2007   13 2.500190
538  2007   15 2.439390
539  2007   16 2.293190
540  2007   17 2.629070
541  2007   18 3.929660
542  2007   19 4.992020
543  2007   20 5.777600
544  2007   21 5.983180
545  2007   22 5.616770
546  2007   23 4.532340
547  2007   24 3.832490
548  2007   25 3.215220
549  2007   26 2.692450
550  2007   27 2.033660
551  2007   28 1.652750
552  2007   29 1.311300
553  2007   30 1.165200
554  2007   31 1.020350
555  2007   32 0.877607
556  2007   33 0.825107
557  2007   34 0.787315
558  2007   35 0.805439
559  2007   36 0.886061
560  2007   37 0.743743
561  2007   38 0.706842
562  2007   39 0.655943
563  2007   40 0.633492
564  2007   41 0.571837
565  2007   42 0.558278
566  2007   43 0.597893
567  2007   44 0.577222
568  2007   45 0.596987
569  2007   46 0.564653
570  2007   47 0.585682
571  2007   48 0.503985
572  2007   49 0.468139
573  2007   50 0.576455
574  2007   51 0.681361
575  2007   52 0.794764
576  2007   53 0.868116
577  2008    1 1.068280
578  2008    2 1.007560
579  2008    3 0.979399
580  2008    4 1.049430
581  2008    5 1.132180
582  2008    6 1.131560
583  2008    7 1.154690
584  2008    8 1.204480
585  2008    9 1.360810
586  2008   10 1.303220
587  2008   11 1.302040
588  2008   12 1.451090
589  2008   13 1.799270
590  2008   14 2.121340
591  2008   15 1.471380
592  2008   16 1.615550
593  2008   17 1.953330
594  2008   18 2.429070
595  2008   19 2.966860
596  2008   20 3.573540
597  2008   21 3.366530
598  2008   22 3.296200
599  2008   23 3.172270
600  2008   24 2.580400
601  2008   25 2.429220
602  2008   26 1.990280
603  2008   27 1.724230
604  2008   28 1.603550
605  2008   29 1.284180
606  2008   30 1.293200
607  2008   31 2.740120
608  2008   32 2.223910
609  2008   33 1.766570
610  2008   34 1.921710
611  2008   35 1.861100
612  2008   36 1.684230
613  2008   37 1.739300
614  2008   38 1.830010
615  2008   39 1.581280
616  2008   40 1.491720
617  2008   41 1.389000
618  2008   42 1.347020
619  2008   43 1.160560
620  2008   44 1.208500
621  2008   45 1.155440
622  2008   46 1.145180
623  2008   47 1.466400
624  2008   48 2.380170
625  2008   49 3.446810
626  2008   50 4.053150
627  2008   51 4.266210
628  2008   52 4.215790
629  2008   53 4.886100
630  2009    1 6.069230
631  2009    2 7.094670
632  2009    3 7.715100
633  2009    4 7.551340
634  2009    5 6.671180
635  2009    6 5.206330
636  2009    7 4.044770
637  2009    8 3.497220
638  2009    9 2.690230
639  2009   10 2.471190
640  2009   11 2.447730
641  2009   12 2.645940
642  2009   13 2.615670
643  2009   15 1.907120
644  2009   16 1.867380
645  2009   17 1.880720
646  2009   18 1.969080
647  2009   19 2.113870
648  2009   20 2.096950
649  2009   21 1.902940
650  2009   22 1.969510
651  2009   23 1.923310
652  2009   24 1.896590
653  2009   25 1.751810
654  2009   26 1.526320
655  2009   27 1.495720
656  2009   28 1.223130
657  2009   29 1.177540
658  2009   30 1.091120
659  2009   31 1.119580
660  2009   32 1.081690
661  2009   33 1.124970
662  2009   34 1.061970
663  2009   35 1.089090
664  2009   36 1.177600
665  2009   37 0.974930
666  2009   38 0.987132
667  2009   39 0.995991
668  2009   40 0.904726
669  2009   41 0.941927
670  2009   42 0.880415
671  2009   43 0.842615
672  2009   44 0.858382
673  2009   45 0.833830
674  2009   46 0.847437
675  2009   47 0.888273
676  2009   48 0.765372
677  2009   49 0.918580
678  2009   50 1.014320
679  2009   51 1.012330
680  2009   52 1.118030
681  2009   53 1.118060
682  2010    1 1.109390
683  2010    2 1.243410
684  2010    3 1.257260
685  2010    4 1.257340
686  2010    5 1.434140
687  2010    6 1.518380
688  2010    7 1.616170
689  2010    8 1.843780
690  2010    9 1.725350
691  2010   10 1.879230
692  2010   11 2.337100
693  2010   12 3.035330
694  2010   13 3.136000
695  2010   15 2.533360
696  2010   16 2.912880
697  2010   17 3.444970
698  2010   18 4.161850
699  2010   19 4.551590
700  2010   20 4.465040
701  2010   21 4.551240
702  2010   22 4.082200
703  2010   23 3.388120
704  2010   24 2.991420
705  2010   25 2.615420
706  2010   26 2.090650
707  2010   27 1.861460
708  2010   28 1.613770
709  2010   29 1.421990
710  2010   30 1.338200
711  2010   31 1.199950
712  2010   32 1.148890
713  2010   33 1.121940
714  2010   34 1.067120
715  2010   35 1.050580
716  2010   36 1.152030
717  2010   37 0.970975
718  2010   38 0.894683
719  2010   39 0.843568
720  2010   40 0.815409
721  2010   41 0.823052
722  2010   42 0.674635
723  2010   43 0.631883
724  2010   44 0.641513
725  2010   45 0.529813
726  2010   46 0.644089
727  2010   47 0.667718
728  2010   48 0.705668
729  2010   49 0.804155
730  2010   50 0.907804
731  2010   51 1.005550
732  2010   52 1.036010
733  2010   53 1.075830
734  2011    1 1.160920
735  2011    2 1.197850
736  2011    3 1.279260
737  2011    4 1.291940
738  2011    5 1.428240
739  2011    6 1.398030
740  2011    7 1.458310
741  2011    8 1.565480
742  2011    9 1.343130
743  2011   10 1.481390
744  2011   11 1.633980
745  2011   12 1.831260
746  2011   13 2.104510
747  2011   15 1.736250
748  2011   16 1.550660
749  2011   17 1.628910
750  2011   18 1.760380
751  2011   19 1.927280
752  2011   20 1.919940
753  2011   21 2.099510
754  2011   22 2.239730
755  2011   23 2.219210
756  2011   24 2.166930
757  2011   25 2.389130
758  2011   26 1.964660
759  2011   27 1.842290
760  2011   28 1.686740
761  2011   29 1.531360
762  2011   30 1.379120
763  2011   31 1.295150
764  2011   32 1.395210
765  2011   33 1.325220
766  2011   34 1.230590
767  2011   35 1.230280
768  2011   36 1.268770
769  2011   37 1.107820
770  2011   38 1.095590
771  2011   39 1.110310
772  2011   40 1.106160
773  2011   41 1.108160
774  2011   42 0.999444
775  2011   43 0.924199
776  2011   44 0.949257
777  2011   45 0.978903
778  2011   46 0.925024
779  2011   47 0.848456
780  2011   48 1.044510
781  2011   49 1.098600
782  2011   50 1.220710
783  2011   51 1.249760
784  2011   52 1.228920
785  2011   53 1.293930
786  2012    1 1.230340
787  2012    2 1.327800
788  2012    3 1.339950
789  2012    4 1.378420
790  2012    5 1.500850
791  2012    6 1.651630
792  2012    7 1.767460
793  2012    8 2.306090
794  2012    9 2.163240
795  2012   10 2.830380
796  2012   11 3.437610
797  2012   12 4.305540
798  2012   13 6.060820
799  2012   15 4.649310
800  2012   16 4.325840
801  2012   17 4.511130
802  2012   18 4.217100
803  2012   19 3.789560
804  2012   20 3.292060
805  2012   21 3.019700
806  2012   22 2.714990
807  2012   23 2.484500
808  2012   24 2.578080
809  2012   25 2.392370
810  2012   26 2.067780
811  2012   27 1.902810
812  2012   28 1.659020
813  2012   29 1.430060
814  2012   30 1.277570
815  2012   31 1.190090
816  2012   32 1.095560
817  2012   33 1.085890
818  2012   34 1.073430
819  2012   35 1.016770
820  2012   36 1.048470
821  2012   37 0.920349
822  2012   38 0.920779
823  2012   39 0.904333
824  2012   40 0.830570
825  2012   41 0.862837
826  2012   42 0.732182
827  2012   43 0.724558
828  2012   44 0.740848
829  2012   45 0.726037
830  2012   46 0.755639
831  2012   47 0.761847
832  2012   48 0.779896
833  2012   49 0.899138
834  2012   50 0.999524
835  2012   51 1.055800
836  2012   52 1.096700
837  2012   53 1.247090
838  2013    1 1.157460
839  2013    2 1.271840
840  2013    3 1.316230
841  2013    4 1.374440
842  2013    5 1.467810
843  2013    6 1.583400
844  2013    7 1.602530
845  2013    8 1.723440
846  2013    9 2.110760
847  2013   10 2.170800
848  2013   11 2.369710
849  2013   12 3.159970
850  2013   13 4.590530
851  2013   15 4.281950
852  2013   16 3.562880
853  2013   17 3.363780
854  2013   18 3.396590
855  2013   19 3.119220
856  2013   20 2.835720
857  2013   21 2.484840
858  2013   22 2.274100
859  2013   23 2.072440
860  2013   24 1.982070
861  2013   25 1.824410
862  2013   26 1.820360
863  2013   27 1.753910
864  2013   28 1.745420
865  2013   29 1.672360
866  2013   30 1.516590
867  2013   31 1.447780
868  2013   32 1.290280
869  2013   33 1.373880
870  2013   34 1.342080
871  2013   35 1.345630
872  2013   36 1.212910
873  2013   37 1.192910
874  2013   38 1.141460
875  2013   39 1.065030
876  2013   40 1.126690
877  2013   41 0.947353
878  2013   42 0.944187
879  2013   43 0.934822
880  2013   44 0.817360
881  2013   45 0.852792
882  2013   46 0.746994
883  2013   47 0.761098
884  2013   48 0.767627
885  2013   49 0.862176
886  2013   50 0.984907
887  2013   51 1.162870
888  2013   52 1.227310
889  2013   53 1.207100
890  2014    1 1.161910
891  2014    2 1.309050
892  2014    3 1.370720
893  2014    4 1.433730
894  2014    5 1.427910
895  2014    6 1.616050
896  2014    7 1.659760
897  2014    8 2.054590
898  2014    9 2.535410
899  2014   10 2.542530
900  2014   11 3.605630
901  2014   12 4.909760
902  2014   13 5.982210
903  2014   14 5.474210
904  2014   15 4.213740
905  2014   16 4.210220
906  2014   17 4.259680
907  2014   18 3.977610
908  2014   19 3.634430
909  2014   20 3.265270
910  2014   21 2.930830
911  2014   22 2.544740
912  2014   23 2.472270
913  2014   24 2.356650
914  2014   25 2.170080
915  2014   26 2.042970
916  2014   27 1.954000
917  2014   28 1.722870
918  2014   29 1.536940
919  2014   30 1.382830
920  2014   31 1.462650
921  2014   32 1.389340
922  2014   33 1.346800
923  2014   34 1.254520
924  2014   35 1.216360
925  2014   36 1.167340
926  2014   37 1.046540
927  2014   38 0.943661
928  2014   39 0.935046
929  2014   40 0.934726
930  2014   41 0.864118
931  2014   42 0.806535
932  2014   43 0.742747
933  2014   44 0.737859
934  2014   45 0.743224
935  2014   46 0.805251
936  2014   47 0.816943
937  2014   48 0.814518
938  2014   49 0.860670
939  2014   50 0.886704
940  2014   51 1.008450
941  2014   52 1.066250
942  2014   53 1.059950
943  2015    1 1.225590
944  2015    2 1.310660
945  2015    3 1.371100
946  2015    4 1.391710
947  2015    5 1.437120
948  2015    6 1.501650
949  2015    7 1.598050
950  2015    8 1.896680
951  2015    9 1.677280
952  2015   10 1.782960
953  2015   11 1.873360
954  2015   12 2.321480
955  2015   13 2.409910
956  2015   15 1.943280
957  2015   16 1.997960
958  2015   17 2.118290
959  2015   18 2.251120
960  2015   19 2.371160
961  2015   20 2.800350
962  2015   21 3.164750
963  2015   22 3.151830
964  2015   23 3.332100
965  2015   24 3.560240
966  2015   25 3.054790
967  2015   26 2.767320
968  2015   27 2.441610
969  2015   28 2.033480
970  2015   29 1.985930
971  2015   30 1.915140
972  2015   31 1.699680
973  2015   32 1.576350
974  2015   33 1.393500
975  2015   34 1.299410
976  2015   35 1.183790
977  2015   36 1.137230
978  2015   37 1.041180
979  2015   38 0.971814
980  2015   39 0.863306
981  2015   40 0.833797
982  2015   41 0.784516
983  2015   42 0.734327
984  2015   43 0.698845
985  2015   44 0.723099
986  2015   45 0.663501
987  2015   46 0.692760
988  2015   47 0.710029
989  2015   48 0.834232
990  2015   49 0.992621
991  2015   50 1.016050
992  2015   51 1.071690
993  2015   52 1.101630
994  2015   53 1.188410
995  2016    1 1.201900
996  2016    2 1.231080
997  2016    3 1.267960
998  2016    4 1.362980
999  2016    5 1.485350
1000 2016    6 1.559540
1001 2016    7 1.647830
1002 2016    8 1.912750
1003 2016    9 1.817250
1004 2016   10 1.914330
1005 2016   11 2.210030
1006 2016   12 2.735680
1007 2016   13 3.368320
1008 2016   15 3.096890
1009 2016   16 3.073460
1010 2016   17 3.516430
1011 2016   18 3.802700
1012 2016   19 4.503130
1013 2016   20 5.063080
1014 2016   21 4.860090
1015 2016   22 4.579160
1016 2016   23 3.556740
1017 2016   24 3.504170
1018 2016   25 3.215110
1019 2016   26 3.100880
1020 2016   27 2.790560
1021 2016   28 2.385470
1022 2016   29 1.970300
1023 2016   30 1.734420
1024 2016   31 1.563030
1025 2016   32 1.412800
1026 2016   33 1.274920
1027 2016   34 1.283400
1028 2016   35 1.166630
1029 2016   36 1.109770
1030 2016   37 1.043330
1031 2016   38 0.905151
1032 2016   39 0.902718
1033 2016   40 0.859531
1034 2016   41 0.818998
1035 2016   42 0.752505
1036 2016   43 0.731146
1037 2016   44 0.733295
1038 2016   45 0.731020
1039 2016   46 0.688340
1040 2016   47 0.732049
1041 2016   48 0.911188
1042 2016   49 1.021050
1043 2016   50 1.094950
1044 2016   51 1.094750
1045 2016   52 1.097750
1046 2016   53 1.188820
1047 2017    1 1.265890
1048 2017    2 1.304790
1049 2017    3 1.340750
1050 2017    4 1.516740
1051 2017    5 1.745830
1052 2017    6 1.887080
1053 2017    7 2.059230
1054 2017    8 2.279710
1055 2017    9 2.283790
1056 2017   10 2.582780
1057 2017   11 3.365580
1058 2017   12 4.731170
1059 2017   13 5.709430
1060 2017   15 5.746580
1061 2017   16 5.892070
1062 2017   17 6.517590
1063 2017   18 7.163380
1064 2017   19 7.521330
1065 2017   20 7.387480
1066 2017   21 6.446880
1067 2017   22 4.958810
1068 2017   23 3.686120
1069 2017   24 3.186260
1070 2017   25 2.768940
1071 2017   26 2.487060
1072 2017   27 2.408020
1073 2017   28 2.074830
1074 2017   29 1.778980
1075 2017   30 1.614870
1076 2017   31 1.538500
1077 2017   32 1.526120
1078 2017   33 1.288470
1079 2017   34 1.183440
1080 2017   35 1.249190
1081 2017   36 1.141310
1082 2017   37 0.987800
1083 2017   38 0.895565
1084 2017   39 0.892204
1085 2017   40 0.877184
1086 2017   41 0.780203
1087 2017   42 0.725075
1088 2017   43 0.682470
1089 2017   44 0.640393
1090 2017   45 0.639127
1091 2017   46 0.705637
1092 2017   47 0.707801
1093 2017   48 0.822659
1094 2017   49 0.859864
1095 2017   50 1.100830
1096 2017   51 1.153230
1097 2017   52 1.201780
1098 2017   53 1.249800
1099 2018    1 1.416480
1100 2018    2 1.398440
1101 2018    3 1.459790
1102 2018    4 1.625460
1103 2018    5 1.777030
1104 2018    6 1.861850
1105 2018    7 1.989660
1106 2018    8 2.249220
1107 2018    9 2.145790
1108 2018   10 2.263420
1109 2018   11 2.640510
1110 2018   12 3.140730
1111 2018   13 3.970060
1112 2018   15 3.466720
1113 2018   16 3.104990
1114 2018   17 3.317330
1115 2018   18 3.791970
1116 2018   19 4.315950
1117 2018   20 4.832150
1118 2018   21 5.042390
1119 2018   22 4.931660
> flu.data.yr.prev <- flu.data.yr.prev[(flu.data.yr.prev$YEAR<2018 & flu.data.yr.prev$ILI >=  max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==2018]) | flu.data.yr.prev$YEAR==2018),]
> 
> flu.data.yr.prev
     YEAR WEEK     ILI
16   1997   14 5.62372
19   1997   17 5.42123
20   1997   18 5.66137
21   1997   19 5.97802
71   1998   17 5.58049
72   1998   18 5.25328
73   1998   19 6.74667
74   1998   20 7.57188
75   1998   21 6.87287
76   1998   22 6.35098
77   1998   23 5.41099
119  1999   12 5.40799
120  1999   13 7.04228
121  1999   15 6.76846
122  1999   16 5.52808
325  2003   10 5.39906
326  2003   11 7.38735
327  2003   12 7.48097
328  2003   13 7.62797
329  2003   14 5.14051
387  2004   20 5.05809
388  2004   21 5.44151
543  2007   20 5.77760
544  2007   21 5.98318
545  2007   22 5.61677
630  2009    1 6.06923
631  2009    2 7.09467
632  2009    3 7.71510
633  2009    4 7.55134
634  2009    5 6.67118
635  2009    6 5.20633
798  2012   13 6.06082
902  2014   13 5.98221
903  2014   14 5.47421
1013 2016   20 5.06308
1059 2017   13 5.70943
1060 2017   15 5.74658
1061 2017   16 5.89207
1062 2017   17 6.51759
1063 2017   18 7.16338
1064 2017   19 7.52133
1065 2017   20 7.38748
1066 2017   21 6.44688
1099 2018    1 1.41648
1100 2018    2 1.39844
1101 2018    3 1.45979
1102 2018    4 1.62546
1103 2018    5 1.77703
1104 2018    6 1.86185
1105 2018    7 1.98966
1106 2018    8 2.24922
1107 2018    9 2.14579
1108 2018   10 2.26342
1109 2018   11 2.64051
1110 2018   12 3.14073
1111 2018   13 3.97006
1112 2018   15 3.46672
1113 2018   16 3.10499
1114 2018   17 3.31733
1115 2018   18 3.79197
1116 2018   19 4.31595
1117 2018   20 4.83215
1118 2018   21 5.04239
1119 2018   22 4.93166
> tmp.pk.week <- 
+ lapply(unique(flu.data.yr.prev$YEAR), function(yr){
+   flu.data.yr.prev$WEEK[which(flu.data.yr.prev$YEAR==yr & flu.data.yr.prev$ILI >= -0.3+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]) & flu.data.yr.prev$ILI <= 0.3+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]))]
+ })
> 
> years <- unique(flu.data.yr.prev$YEAR)
> flu.data.yr.prev.pk.wk <- vector()
> for(ii in 1:length(tmp.pk.week)){
+   for(kk in 1:length(tmp.pk.week[[ii]])){
+     flu.data.yr.prev.pk.wk <- rbind(flu.data.yr.prev.pk.wk, c(years[ii], tmp.pk.week[[ii]][kk]))
+   }
+ }
> 
> 
> tmp.pk.prev <- 
+ lapply(unique(flu.data.yr.prev$YEAR), function(yr){
+   flu.data.yr.prev$ILI[which(flu.data.yr.prev$YEAR==yr & flu.data.yr.prev$ILI >= -0.3+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]) & flu.data.yr.prev$ILI <= 0.3+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]))]
+ })
> 
> years <- unique(flu.data.yr.prev$YEAR)
> flu.data.yr.prev.pk.prev <- vector()
> for(ii in 1:length(tmp.pk.prev)){
+   for(kk in 1:length(tmp.pk.prev[[ii]])){
+     flu.data.yr.prev.pk.prev <- rbind(flu.data.yr.prev.pk.prev, c(years[ii], tmp.pk.prev[[ii]][kk]))
+   }
+ }
> 
> 
> 
> ##########################################################
> ##########################################################
> ##########################################################
> 
> ################################################################
> ############# Logistic Regression ##############################
> ################################################################
> sim.forecast.ili.LIST <- list()
> for(j in 1:10){
+ 
+ err.ILI.cv <- -Inf
+ while(sum(is.infinite(err.ILI.cv))>0 | sum(is.na(err.ILI.cv)) >0){
+ 
+ 
+ X.input <- data.frame(year=flu.data.yr.prev.pk.wk[,1])
+ Y.output <- data.frame(ili=flu.data.yr.prev.pk.wk[,2])
+ 
+ head(X.input)
+ head(Y.output)
+ 
+ id.random <- which(X.input$year>=1997 & X.input$year<2018)
+ id.random <- sample(id.random, length(id.random))
+ #id.random <- sample(1:length(id.random), length(id.random))
+ id.test <- which(X.input$year>=2015)
+ 
+ id.random1 <- id.random[1:floor(length(id.random)*0.8)]
+ id.random2 <- id.random[floor(length(id.random)*0.8):length(id.random)]
+ 
+ scale <- 1 # 1: 130 bins, 10: 1300 bins
+ 
+ ### training data set and Standardization/Rescaling ###
+ X.data <- X.input[id.random1,] 
+ X.data <- as.matrix(X.data)
+ X.mean <- apply(X.data, 2, mean)
+ X.sd <- apply(X.data, 2,sd)
+ X.min <- apply(X.data, 2, min)
+ X.max <- apply(X.data, 2, max)
+ X.data <- apply(X.data, 2, function(tmp)(tmp-mean(tmp))/sd(tmp)) # Standardization
+ #X.data <- sapply(X.data, function(tmp)(tmp-min(tmp))/(max(tmp)-min(tmp))) # Rescaling
+ ##############################################
+ 
+ ### test data set ###
+ #X.input[id.2011,]$year <- 2020
+ #X.input[id.2011,]$year <- 2011
+ #X.input[id.2011,]$year <- 2012
+ #X.input[id.2011,]$year <- 2015
+ X.test <- as.matrix(sapply(1:length(id.test),function(k)(X.input[id.test[k],]-X.mean)/X.sd)) # Standardization
+ #X.2011 <- t(sapply(1:length(id.2011),function(k)(X.input[id.2011[k],]-X.min)/(X.max-X.min))) # Rescaling
+ X.test <- cbind(rep(1,nrow(X.test)), X.test)
+ X.test <- matrix(unlist(X.test), nrow(X.test), ncol(X.test))
+ 
+ X.forecast <- tail(X.input,1)
+ X.forecast$year <- 2018
+ X.forecast <- as.matrix(sapply(1,function(k)(X.forecast[k,]-X.mean)/X.sd)) # Standardization
+ #X.2011 <- t(sapply(1:length(id.2011),function(k)(X.input[id.2011[k],]-X.min)/(X.max-X.min))) # Rescaling
+ X.forecast <- cbind(rep(1,nrow(X.forecast)), X.forecast)
+ X.forecast <- matrix(unlist(X.forecast), nrow(X.forecast), ncol(X.forecast))
+ 
+ #####################
+ 
+ ### cross valication data set ###
+ X.cv <- as.matrix(sapply(1:length(id.random2),function(k)(X.input[id.random2[k],]-X.mean)/X.sd)) # Standardization
+ #X.2011 <- t(sapply(1:length(id.2011),function(k)(X.input[id.2011[k],]-X.min)/(X.max-X.min))) # Rescaling
+ X.cv <- cbind(rep(1,nrow(X.cv)), X.cv)
+ X.cv <- matrix(unlist(X.cv), nrow(X.cv), ncol(X.cv))
+ #####################
+ 
+ ### initialize paraemters and variables ###
+ Theta <- matrix(rep(0, 1+ncol(X.data)), 1+ncol(X.data), 1)
+ X <- matrix( unlist(cbind(rep(1, nrow(X.data)),X.data)), nrow(X.data), 1+ncol(X.data))
+ 
+ Y.data <- floor(scale*Y.output$ili[id.random1]) == 1
+ Y <- matrix(Y.data*1, nrow=length(id.random1), ncol=1)
+ 
+ m <- nrow(X) # number of examples
+ lambda <- 0.01 # regularization param, under fit if too large, over fit if to small
+ 
+ J <- 0
+ Theta.grad <- rep(0, length(Theta)) # initial parameter Thata
+ ###########################################
+ 
+ ### hypothesis function ###
+ hypo <- function(Theta){
+   1/(1+exp(-1*(X %*% Theta))) # hypothesis function
+ }
+ #h.prob <- hypo(Theta) 
+ ###########################
+ 
+ ### cost function ###
+ cost.fn <- function(Theta){
+   h.prob <- hypo(Theta) # hypothesis function
+   J <- sum(Y * -log(h.prob) + (1-Y) * (-log(1-h.prob)))/m # cost function
+   J <- J + sum(lambda/(2*m)*(Theta[-1])^2) # regularization term
+   return(J)
+ }
+ #####################
+ 
+ ### gradient function ###
+ grad.fn <- function(Theta){
+   h.prob <- hypo(Theta) # hypothesis function
+   Theta.grad <- apply(X, 2, function(xj)sum((h.prob - Y) * xj)/m) # dCost/dTheta
+   Theta.grad <- Theta.grad + c(0, lambda/m * Theta[-1]) # regularization term
+   return(Theta.grad)
+ }
+ ########################
+ 
+ ## forecast function ###
+ forecast <- function(Theta, X){
+   1/(1+exp(-1*(X %*% Theta))) 
+ }
+ ########################
+ 
+ ## forecast Error function ###
+ cost.ERR <- function(Theta, X, Y){
+   h.prob <- forecast(Theta, X) # hypothesis function
+   J <- sum(Y * -log(h.prob) + (1-Y) * (-log(1-h.prob)))/nrow(X) # cost function
+   return(J)
+ }
+ ########################
+ 
+ ################################################################
+ ################################################################
+ ################################################################
+ ILI.Theta <- list()
+ err.ILI.train <- vector()
+ err.ILI.cv <- vector()
+ 
+ for( i in (-1:15)){# big loop
+ lambda <- (2^(i/1))/100
+ ##############################################
+ ###### ILI prediction using test-dataset ######
+ ##############################################
+ Theta.all <- vector()
+ system.time(
+ for(kk in 1:33){
+   Y.data <- floor(scale*Y.output$ili[id.random1]) == kk
+   Y <- matrix(Y.data*1, nrow=length(id.random1), ncol=1)
+   Theta.optm <- optim(par=Theta, fn=cost.fn, gr=grad.fn, method="BFGS")
+   #Theta.optm <- optim(par=Theta, fn=cost.fn, method="Nelder-Mead")
+   Theta.optm <- Theta.optm$par
+   Theta.all <- cbind(Theta.all, Theta.optm)
+ }
+ )
+ 
+ ILI.Theta <- c(ILI.Theta, list(Theta.all))
+ 
+ err.ILI.tmp <- vector()
+ for(kk in 1:32){
+   Y.data <- floor(scale*Y.output$ili[id.random1]) == kk
+   Y <- matrix(Y.data*1, nrow=length(id.random1), ncol=1)
+   tmp <- cost.ERR(Theta.all[,(kk+1)], X, Y)
+   err.ILI.tmp <- c(err.ILI.tmp, tmp)
+ }
+ err.ILI.train <- c(err.ILI.train, sum(err.ILI.tmp))
+ 
+ err.ILI.cv.tmp <- vector()
+ for(kk in 1:32){
+   Y.data.cv <- floor(scale*Y.output$ili[id.random2]) == kk
+   Y.cv <- matrix(Y.data.cv*1, nrow=length(id.random2), ncol=1)
+   tmp <- cost.ERR(Theta.all[,(kk+1)], X.cv, Y.cv)
+   err.ILI.cv.tmp <- c(err.ILI.cv.tmp, tmp)
+ }
+ err.ILI.cv <- c(err.ILI.cv, sum(err.ILI.cv.tmp))
+ 
+ ##############################################
+ ##############################################
+ ##############################################
+ 
+ }# big loop
+ } # end of while()
+ D <- length(err.ILI.train) - 1
+ total.cost <- c(err.ILI.train, err.ILI.cv)
+ plot(2^(0:D)/100, err.ILI.cv, type="l", ylim=c(min(total.cost), max(total.cost)), col="green", xlab="lambda", ylab="cost")
+ lines(2^(0:D)/100, err.ILI.train, type="l", col="red")
+ 
+ lambda.ili.id <- which((err.ILI.cv) == min(err.ILI.cv))[1]
+ 
+ #lambda.tf.id <- which((err.TF.cv+err.TT.cv) == min(err.TF.cv+err.TT.cv))
+ #lambda.tt.id <- which((err.TF.cv+err.TT.cv) == min(err.TF.cv+err.TT.cv))
+ 
+ ##############################################
+ ##############################################
+ ##############################################
+ ### forecasts of test data 2014/2015, 2015/2016
+ sim.test.ili <- vector()
+ for(k in 1:length(id.test)){
+   tmp <- c(forecast(ILI.Theta[[lambda.ili.id]], X.test[k,]))
+   sim.test.ili <- cbind(sim.test.ili, tmp/sum(tmp))
+ }
+ 
+ ## ILI
+ sim.test.ili.avg <- apply(sim.test.ili, 1, mean)
+ 
+ ili.mean.true <- mean(Y.output$ili[id.test])
+ 
+ plot.ILI <- function(){
+ plot(sim.test.ili[,1], type="l", main="TEST: national flu peak wk 2014/2015, 2015/2016", xlab="%ILI", ylab="density", ylim=c(0,0.1))
+ abline(v=(scale*Y.output$ili[id.test]), col="grey")
+ sapply(1:ncol(sim.test.ili),function(kk)lines(sim.test.ili[,kk], type="l"))
+ }
+ 
+ ### forecasts of test data 2016/2018
+ sim.forecast.ili <- vector()
+ for(k in 1:nrow(X.forecast)){
+   tmp <- c(forecast(ILI.Theta[[lambda.ili.id]], X.forecast[k,]))
+   sim.forecast.ili <- cbind(sim.forecast.ili, tmp/sum(tmp))
+ }
+ 
+ plot.ILI.forecast <- function(){
+ plot( sim.forecast.ili[,1], type="l", main="FORECAST: national flu peak wk 2016/2018", xlab="%ILI", ylab="density", ylim=c(0,0.1))
+ sapply(1:ncol(sim.forecast.ili),function(kk)lines(sim.forecast.ili[,kk], type="l"))
+ }
+ 
+ ##############################
+ ###### plot results ##########
+ ##############################
+ 
+ png("./plots/national pk wk forecast.png",width=6,height=8,units="in",res=150)
+ 
+ par(mfrow = c(3,1))
+ plot(2^(0:D)/100, err.ILI.cv, type="l", col="green", xlab="lambda", ylab="cost", ylim=c(min(c(err.ILI.cv, err.ILI.train)), max(c(err.ILI.cv, err.ILI.train))))
+ lines(2^(0:D)/100, err.ILI.train, type="l", col="red")
+ legend("bottomright", c("training Error","cross validation Error"), lty=1, col=c("red", "green"))
+ plot.ILI()
+ plot.ILI.forecast()
+ 
+ dev.off()
+ ##############################
+ ##############################
+ ##############################
+ sim.forecast.ili.LIST <- c(sim.forecast.ili.LIST, list(sim.forecast.ili))
+ } # external for-loop
> 
> tmp <- sim.forecast.ili.LIST[[1]]
> for(i in 2:length(sim.forecast.ili.LIST)){
+   tmp <- tmp + sim.forecast.ili.LIST[[i]]
+ }
> 
> sim.forecast.ili <- tmp/length(sim.forecast.ili.LIST)
> 
> sapply(1:length(sim.forecast.ili.LIST), function(k)apply(sim.forecast.ili.LIST[[k]], 2, function(x)sum(x*(1:33))))
 [1] 15.44163 14.82094 15.46798 15.33584 15.25378 14.11412 15.85628 15.40865
 [9] 14.13067 14.86293
> 
> national4wks <- read.csv("national.pk.wk.forecast.template.csv")
> head(national4wks)
     Location           Target  Type Unit Bin_start_incl Bin_end_notincl
1 US National Season peak week Point week             NA              NA
2 US National Season peak week   Bin week             40              41
3 US National Season peak week   Bin week             41              42
4 US National Season peak week   Bin week             42              43
5 US National Season peak week   Bin week             43              44
6 US National Season peak week   Bin week             44              45
        Value
1 51.00000000
2  0.03030303
3  0.03030303
4  0.03030303
5  0.03030303
6  0.03030303
> nrow(national4wks)
[1] 34
> 
> national4wks$Value[1] <- week2season(floor(sum(sim.forecast.ili[,1]*(1:length(sim.forecast.ili[,1])))))
> national4wks$Value[(2):(2+32)] <- signif(sim.forecast.ili[,1], 2)
> 
> head(national4wks)
     Location           Target  Type Unit Bin_start_incl Bin_end_notincl
1 US National Season peak week Point week             NA              NA
2 US National Season peak week   Bin week             40              41
3 US National Season peak week   Bin week             41              42
4 US National Season peak week   Bin week             42              43
5 US National Season peak week   Bin week             43              44
6 US National Season peak week   Bin week             44              45
    Value
1 1.00000
2 0.00026
3 0.00026
4 0.06900
5 0.06100
6 0.00026
> 
> write.csv(national4wks, "./output/national.pk.wk.csv", row.names=F)
> 
> 
> proc.time()
   user  system elapsed 
 24.464   0.052  24.516 
