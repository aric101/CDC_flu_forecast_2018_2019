
R version 3.4.1 (2017-06-30) -- "Single Candle"
Copyright (C) 2017 The R Foundation for Statistical Computing
Platform: x86_64-redhat-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

[Previously saved workspace restored]

> Region.name <- 
+ structure(c(2L, 3L, 4L, 5L, 6L, 7L, 8L, 9L, 10L, 11L, 12L, 13L, 
+ 14L, 15L, 16L, 17L, 18L, 19L, 20L, 21L, 22L, 23L, 24L, 25L, 26L, 
+ 27L, 28L, 29L, 30L, 31L, 32L, 33L, 34L, 36L, 37L, 38L, 39L, 40L, 
+ 41L, 44L, 45L, 46L, 47L, 48L, 49L, 50L, 52L, 53L, 54L, 55L, 56L, 
+ 35L, 51L, 42L), .Label = c("", "Alabama", "Alaska", "Arizona", 
+ "Arkansas", "California", "Colorado", "Connecticut", "Delaware", 
+ "District of Columbia", "Florida", "Georgia", "Hawaii", "Idaho", 
+ "Illinois", "Indiana", "Iowa", "Kansas", "Kentucky", "Louisiana", 
+ "Maine", "Maryland", "Massachusetts", "Michigan", "Minnesota", 
+ "Mississippi", "Missouri", "Montana", "Nebraska", "Nevada", "New Hampshire", 
+ "New Jersey", "New Mexico", "New York", "New York City", "North Carolina", 
+ "North Dakota", "Ohio", "Oklahoma", "Oregon", "Pennsylvania", 
+ "Puerto Rico", "REGION", "Rhode Island", "South Carolina", "South Dakota", 
+ "Tennessee", "Texas", "Utah", "Vermont", "Virgin Islands", "Virginia", 
+ "Washington", "West Virginia", "Wisconsin", "Wyoming"), class = "factor")
> Region.name <- as.character(Region.name)
> 
> ##########################################################
> ############# Data Loading  ##############################
> ##########################################################
> rm(list=ls())
> week2season <- function(k)c((40:52),(1:39))[k]
> week2season(5)
[1] 44
> 
> #wkID <- (5:8) + (0)
> wkID <- (4:7) + (18) # EW08 2019
> 
> week2season(wkID)
[1]  9 10 11 12
> 
> system("ls ./data/*.csv")
./data/ILINetCA.csv
./data/ILINet.csv
./data/ILINetHHS.csv
./data/national1-4wk.forecast.template.csv
./data/national.onset.wk.forecast.template.csv
./data/national.pk.prev.forecast.template.csv
./data/national.pk.wk.forecast.template.csv
./data/wILI_Baseline.csv
> 
> flu.data <- read.csv("./data/ILINetCA.csv", header=F)[-(1:2),]
> names(flu.data) <- as.character(read.csv("./data/ILINet.csv", header=F, colClasses="character")[2,])
> flu.data <- flu.data[flu.data$REGION=="California",]
> head(flu.data)
    REGION TYPE     REGION YEAR WEEK % WEIGHTED ILI %UNWEIGHTED ILI AGE 0-4
7        States California 2010   40              X         1.95412       X
59       States California 2010   41              X         2.15266       X
111      States California 2010   42              X         2.24173       X
163      States California 2010   43              X         1.91748       X
215      States California 2010   44              X         2.52326       X
267      States California 2010   45              X         2.74562       X
    AGE 25-49 AGE 25-64 AGE 5-24 AGE 50-64 AGE 65 ILITOTAL NUM. OF PROVIDERS
7           X         X        X         X      X      632               112
59          X         X        X         X      X      742               122
111         X         X        X         X      X      766               126
163         X         X        X         X      X      666               130
215         X         X        X         X      X      887               131
267         X         X        X         X      X      906               126
    TOTAL PATIENTS
7            32342
59           34469
111          34170
163          34733
215          35153
267          32998
> flu.data <- flu.data[,-5]
> names(flu.data)[5] <- "ILI"
> head(flu.data)
    REGION TYPE     REGION YEAR WEEK     ILI AGE 0-4 AGE 25-49 AGE 25-64
7        States California 2010   40 1.95412       X         X         X
59       States California 2010   41 2.15266       X         X         X
111      States California 2010   42 2.24173       X         X         X
163      States California 2010   43 1.91748       X         X         X
215      States California 2010   44 2.52326       X         X         X
267      States California 2010   45 2.74562       X         X         X
    AGE 5-24 AGE 50-64 AGE 65 ILITOTAL NUM. OF PROVIDERS TOTAL PATIENTS
7          X         X      X      632               112          32342
59         X         X      X      742               122          34469
111        X         X      X      766               126          34170
163        X         X      X      666               130          34733
215        X         X      X      887               131          35153
267        X         X      X      906               126          32998
> tail(flu.data)
      REGION TYPE     REGION YEAR WEEK     ILI AGE 0-4 AGE 25-49 AGE 25-64
23127      States California 2019    3 2.89809       X         X         X
23181      States California 2019    4 2.73051       X         X         X
23235      States California 2019    5 3.21239       X         X         X
23289      States California 2019    6 3.14602       X         X         X
23343      States California 2019    7 3.71387       X         X         X
23397      States California 2019    8 3.53754       X         X         X
      AGE 5-24 AGE 50-64 AGE 65 ILITOTAL NUM. OF PROVIDERS TOTAL PATIENTS
23127        X         X      X     1270               112          43822
23181        X         X      X     1173               111          42959
23235        X         X      X     1514               110          47130
23289        X         X      X     1445               109          45931
23343        X         X      X     1569               102          42247
23397        X         X      X     1275                84          36042
> #flu.data <- flu.data[-which(flu.data$ILI=="X"),]
> 
> flu.data$ILI <- as.numeric(as.character(flu.data$ILI))
> flu.data$YEAR <- as.numeric(as.character(flu.data$YEAR))
> flu.data$WEEK <- as.numeric(as.character(flu.data$WEEK))
> #flu.data$ILI <- signif(flu.data$ILI,2)
> 
> flu.data.wk.prev <- flu.data[,c("YEAR","WEEK","ILI")]
> flu.data.wk.prev$WEEK <- flu.data.wk.prev$WEEK - 39
> flu.data.wk.prev$YEAR[flu.data.wk.prev$WEEK<=0] <- flu.data.wk.prev$YEAR[flu.data.wk.prev$WEEK<=0] -1
> flu.data.wk.prev$WEEK[flu.data.wk.prev$WEEK<=0] <- flu.data.wk.prev$WEEK[flu.data.wk.prev$WEEK<=0] + 53
> tail(flu.data.wk.prev)
      YEAR WEEK     ILI
23127 2018   17 2.89809
23181 2018   18 2.73051
23235 2018   19 3.21239
23289 2018   20 3.14602
23343 2018   21 3.71387
23397 2018   22 3.53754
> flu.data.wk.prev <- flu.data.wk.prev[flu.data.wk.prev$WEEK>=(head(wkID,1)-3) & flu.data.wk.prev$WEEK<=tail(wkID+1,1),]
> ## flu.data.wk.prev <- flu.data.wk.prev[
> ## (flu.data.wk.prev$YEAR<2016 & flu.data.wk.prev$WEEK>=head(wkID,1) & flu.data.wk.prev$WEEK<=tail(wkID,1)) |
> ## (flu.data.wk.prev$YEAR==2016 & flu.data.wk.prev$WEEK<=tail(wkID+1,1))
> ## ,]
> 
> tmp.ILI <- tail(flu.data.wk.prev$ILI[flu.data.wk.prev$YEAR==2018], 1)
> tmp.WEEK <- tail(flu.data.wk.prev$WEEK[flu.data.wk.prev$YEAR==2018], 1)
> tmp.YEAR <- flu.data.wk.prev$YEAR[(flu.data.wk.prev$WEEK==tmp.WEEK) & (flu.data.wk.prev$ILI >= (tmp.ILI-0.3)) & (flu.data.wk.prev$ILI <= (tmp.ILI+0.3))]
> #if(length(tmp.YEAR)==2)tmp.YEAR = max(tmp.YEAR)
> tmp.rows <- sapply(1:length(tmp.YEAR), function(k)which(flu.data.wk.prev$YEAR == tmp.YEAR[k]))
> tmp.rows <- unlist(tmp.rows)
> flu.data.wk.prev <- flu.data.wk.prev[tmp.rows,]
> 
> 
> flu.data.yr.prev <- flu.data[,c("YEAR","WEEK","ILI")]
> flu.data.yr.prev$WEEK <- flu.data.yr.prev$WEEK - 39
> flu.data.yr.prev$YEAR[flu.data.yr.prev$WEEK<=0] <- flu.data.yr.prev$YEAR[flu.data.yr.prev$WEEK<=0] -1
> flu.data.yr.prev$WEEK[flu.data.yr.prev$WEEK<=0] <- flu.data.yr.prev$WEEK[flu.data.yr.prev$WEEK<=0] + 53
> head(flu.data.yr.prev)
    YEAR WEEK     ILI
7   2010    1 1.95412
59  2010    2 2.15266
111 2010    3 2.24173
163 2010    4 1.91748
215 2010    5 2.52326
267 2010    6 2.74562
> tail(flu.data.yr.prev)
      YEAR WEEK     ILI
23127 2018   17 2.89809
23181 2018   18 2.73051
23235 2018   19 3.21239
23289 2018   20 3.14602
23343 2018   21 3.71387
23397 2018   22 3.53754
> flu.data.yr.prev <- flu.data.yr.prev[-nrow(flu.data.yr.prev), ]
> flu.data.yr.prev
      YEAR WEEK      ILI
7     2010    1 1.954120
59    2010    2 2.152660
111   2010    3 2.241730
163   2010    4 1.917480
215   2010    5 2.523260
267   2010    6 2.745620
319   2010    7 2.819630
371   2010    8 3.161320
423   2010    9 2.606310
475   2010   10 3.056130
527   2010   11 3.659800
579   2010   12 4.620770
631   2010   13 4.689500
683   2010   15 3.562130
735   2010   16 3.793250
787   2010   17 4.026890
839   2010   18 4.605010
891   2010   19 4.339830
943   2010   20 4.887110
995   2010   21 5.071620
1047  2010   22 5.174020
1099  2010   23 5.000870
1151  2010   24 4.694470
1203  2010   25 4.437900
1255  2010   26 3.297030
1307  2010   27 3.200000
1359  2010   28 2.646830
1411  2010   29 2.571930
1463  2010   30 2.241990
1515  2010   31 2.344360
1567  2010   32 2.146320
1619  2010   33 2.052790
1671  2010   34 2.132850
1723  2010   35 2.106670
1775  2010   36 2.576500
1827  2010   37 2.264240
1879  2010   38 1.847620
1931  2010   39 1.732980
1983  2010   40 1.676840
2035  2010   41 1.687740
2087  2010   42 1.604320
2139  2010   43 1.454370
2191  2010   44 1.351410
2243  2010   45 0.553292
2295  2010   46 1.356880
2347  2010   47 1.163700
2399  2010   48 1.348330
2451  2010   49 1.478570
2503  2010   50 1.602150
2555  2010   51 1.748910
2607  2010   52 1.759940
2659  2010   53 1.847450
2711  2011    1 1.802950
2764  2011    2 2.065340
2817  2011    3 2.382940
2870  2011    4 2.291280
2923  2011    5 2.483580
2976  2011    6 2.174400
3029  2011    7 2.627400
3082  2011    8 2.512160
3135  2011    9 1.685800
3188  2011   10 2.703700
3241  2011   11 3.021350
3294  2011   12 3.607810
3347  2011   13 4.353100
3400  2011   15 3.505890
3453  2011   16 2.942980
3506  2011   17 2.737050
3559  2011   18 3.532470
3612  2011   19 3.853570
3665  2011   20 3.297880
3718  2011   21 3.573430
3771  2011   22 4.205620
3824  2011   23 3.540250
3877  2011   24 2.692660
3930  2011   25 3.124470
3983  2011   26 2.832050
4036  2011   27 3.898860
4089  2011   28 2.991640
4142  2011   29 2.871930
4195  2011   30 2.151020
4248  2011   31 2.153650
4301  2011   32 2.361060
4354  2011   33 2.177780
4407  2011   34 2.045310
4460  2011   35 2.225890
4513  2011   36 2.214390
4566  2011   37 2.015330
4619  2011   38 1.812740
4672  2011   39 2.038140
4725  2011   40 1.875000
4778  2011   41 1.933570
4831  2011   42 1.826610
4884  2011   43 1.693070
4937  2011   44 1.684990
4990  2011   45 1.754220
5043  2011   46 1.614350
5096  2011   47 1.076860
5149  2011   48 1.883680
5202  2011   49 2.015900
5255  2011   50 2.322700
5308  2011   51 2.244500
5361  2011   52 2.439550
5414  2011   53 2.409730
5467  2012    1 2.101330
5520  2012    2 2.265020
5573  2012    3 2.356970
5626  2012    4 2.371770
5679  2012    5 2.457360
5732  2012    6 2.561570
5785  2012    7 2.512090
5838  2012    8 2.730420
5891  2012    9 2.563130
5944  2012   10 2.459370
5997  2012   11 2.708990
6050  2012   12 3.373380
6103  2012   13 5.496210
6156  2012   15 3.623060
6209  2012   16 3.708300
6262  2012   17 4.989230
6315  2012   18 5.839650
6368  2012   19 6.101460
6421  2012   20 5.435700
6474  2012   21 4.869210
6527  2012   22 4.148310
6580  2012   23 3.709490
6633  2012   24 3.983370
6686  2012   25 3.450640
6739  2012   26 3.237000
6792  2012   27 2.962890
6845  2012   28 2.504030
6898  2012   29 1.978290
6951  2012   30 1.826250
7004  2012   31 1.733700
7057  2012   32 1.685600
7110  2012   33 1.625420
7163  2012   34 1.693970
7216  2012   35 1.591790
7269  2012   36 1.523850
7322  2012   37 1.546480
7375  2012   38 1.585670
7428  2012   39 1.591090
7481  2012   40 1.415410
7534  2012   41 1.432550
7587  2012   42 1.250560
7640  2012   43 1.303910
7693  2012   44 1.322400
7746  2012   45 1.228180
7799  2012   46 1.321310
7852  2012   47 1.219460
7905  2012   48 1.193760
7958  2012   49 1.530350
8011  2012   50 1.631640
8064  2012   51 1.705430
8117  2012   52 1.678390
8170  2012   53 1.945810
8223  2013    1 1.524790
8277  2013    2 1.752690
8331  2013    3 1.746620
8385  2013    4 1.779650
8439  2013    5 1.993070
8493  2013    6 2.297740
8547  2013    7 2.291610
8601  2013    8 2.134040
8655  2013    9 2.595580
8709  2013   10 2.325530
8763  2013   11 2.770580
8817  2013   12 3.155700
8871  2013   13 5.104910
8925  2013   15 5.110100
8979  2013   16 4.617440
9033  2013   17 4.572870
9087  2013   18 5.048720
9141  2013   19 4.287070
9195  2013   20 3.837810
9249  2013   21 3.462350
9303  2013   22 3.387190
9357  2013   23 3.039550
9411  2013   24 2.721340
9465  2013   25 2.313750
9519  2013   26 2.396880
9573  2013   27 1.992610
9627  2013   28 2.013780
9681  2013   29 1.846370
9735  2013   30 1.872910
9789  2013   31 1.833020
9843  2013   32 1.692410
9897  2013   33 1.728030
9951  2013   34 1.802060
10005 2013   35 2.083800
10059 2013   36 1.864480
10113 2013   37 1.880640
10167 2013   38 1.805840
10221 2013   39 1.771550
10275 2013   40 1.764790
10329 2013   41 1.806660
10383 2013   42 1.493650
10437 2013   43 1.488580
10491 2013   44 1.265230
10545 2013   45 1.278470
10599 2013   46 1.057090
10653 2013   47 1.057140
10707 2013   48 1.204470
10761 2013   49 1.315740
10815 2013   50 1.582830
10869 2013   51 1.871740
10923 2013   52 1.869480
10977 2013   53 1.786560
11031 2014    1 1.908900
11085 2014    2 2.018720
11139 2014    3 1.881580
11193 2014    4 1.841970
11247 2014    5 1.886030
11301 2014    6 2.229640
11355 2014    7 2.217970
11409 2014    8 2.489840
11463 2014    9 2.727180
11517 2014   10 2.409360
11571 2014   11 2.577370
11625 2014   12 2.903690
11679 2014   13 4.477290
11733 2014   14 4.771280
11787 2014   15 3.996830
11841 2014   16 4.331410
11895 2014   17 4.880050
11949 2014   18 5.010630
12003 2014   19 4.505000
12057 2014   20 4.009400
12111 2014   21 3.446320
12165 2014   22 3.173110
12219 2014   23 3.073020
12273 2014   24 3.176450
12327 2014   25 2.952800
12381 2014   26 2.656240
12435 2014   27 2.655000
12489 2014   28 2.398510
12543 2014   29 2.118010
12597 2014   30 2.135280
12651 2014   31 2.148160
12705 2014   32 2.228590
12759 2014   33 2.265050
12813 2014   34 2.109430
12867 2014   35 2.076540
12921 2014   36 2.177390
12975 2014   37 1.960650
13029 2014   38 1.868780
13083 2014   39 1.659020
13137 2014   40 1.640780
13191 2014   41 1.489100
13245 2014   42 1.270190
13299 2014   43 1.076180
13353 2014   44 1.075270
13407 2014   45 1.060280
13461 2014   46 1.223210
13515 2014   47 1.155950
13569 2014   48 1.303530
13623 2014   49 1.262810
13677 2014   50 0.909243
13731 2014   51 1.407900
13785 2014   52 1.346360
13839 2014   53 1.212460
13893 2015    1 1.380640
13947 2015    2 1.566100
14001 2015    3 1.504110
14055 2015    4 1.617720
14109 2015    5 1.735890
14163 2015    6 1.808130
14217 2015    7 2.140970
14271 2015    8 2.398660
14325 2015    9 2.022730
14379 2015   10 2.071010
14433 2015   11 2.170170
14487 2015   12 2.913330
14541 2015   13 3.277220
14595 2015   15 2.501800
14649 2015   16 2.470390
14703 2015   17 2.689710
14757 2015   18 2.833280
14811 2015   19 3.284070
14865 2015   20 3.914390
14919 2015   21 4.396190
14973 2015   22 3.731430
15027 2015   23 3.637240
15081 2015   24 3.694420
15135 2015   25 3.192830
15189 2015   26 2.992620
15243 2015   27 2.809270
15297 2015   28 2.116520
15351 2015   29 1.924030
15405 2015   30 1.628520
15459 2015   31 1.735970
15513 2015   32 1.849020
15567 2015   33 1.530590
15621 2015   34 1.486810
15675 2015   35 1.443990
15729 2015   36 1.378650
15783 2015   37 1.366710
15837 2015   38 1.264400
15891 2015   39 1.158670
15945 2015   40 1.219860
15999 2015   41 1.146080
16053 2015   42 1.045730
16107 2015   43 0.904141
16161 2015   44 0.856349
16215 2015   45 0.851270
16269 2015   46 0.896093
16323 2015   47 1.009940
16377 2015   48 1.047090
16431 2015   49 1.309930
16485 2015   50 1.362730
16539 2015   51 1.717080
16593 2015   52 1.783980
16647 2015   53 1.657030
16701 2016    1 1.252880
16755 2016    2 1.392910
16809 2016    3 1.516310
16863 2016    4 1.523830
16917 2016    5 1.576190
16971 2016    6 1.746940
17025 2016    7 1.776800
17079 2016    8 2.144590
17133 2016    9 2.007730
17187 2016   10 2.074840
17241 2016   11 2.375250
17295 2016   12 2.878290
17349 2016   13 3.526080
17403 2016   15 3.266700
17457 2016   16 2.999500
17511 2016   17 2.777990
17565 2016   18 3.115720
17619 2016   19 3.192020
17673 2016   20 2.694190
17727 2016   21 2.523410
17781 2016   22 2.388540
17835 2016   23 2.145930
17889 2016   24 2.170890
17943 2016   25 2.335980
17997 2016   26 1.959790
18051 2016   27 1.965210
18105 2016   28 1.739820
18159 2016   29 1.595890
18213 2016   30 1.629940
18267 2016   31 1.661800
18321 2016   32 1.463710
18375 2016   33 1.433260
18429 2016   34 1.424500
18483 2016   35 1.391170
18537 2016   36 1.399930
18591 2016   37 1.615900
18645 2016   38 1.283800
18699 2016   39 1.252370
18753 2016   40 1.396570
18807 2016   41 1.312370
18861 2016   42 1.124250
18915 2016   43 1.093870
18969 2016   44 0.979101
19023 2016   45 0.853916
19077 2016   46 0.936918
19131 2016   47 1.012720
19185 2016   48 1.137870
19239 2016   49 1.198910
19293 2016   50 1.280880
19347 2016   51 1.547000
19401 2016   52 1.521050
19455 2016   53 1.556260
19509 2017    1 1.754210
19563 2017    2 1.535340
19617 2017    3 1.567140
19671 2017    4 1.723250
19725 2017    5 1.983550
19779 2017    6 1.908510
19833 2017    7 1.998010
19887 2017    8 2.218900
19941 2017    9 1.949180
19995 2017   10 2.498130
20049 2017   11 3.391790
20103 2017   12 4.588910
20157 2017   13 6.842450
20211 2017   15 6.665130
20265 2017   16 4.691230
20319 2017   17 3.935920
20373 2017   18 3.897790
20427 2017   19 4.258720
20481 2017   20 3.819010
20535 2017   21 3.714030
20589 2017   22 3.511020
20643 2017   23 3.648570
20697 2017   24 3.393030
20751 2017   25 3.210070
20805 2017   26 2.957900
20859 2017   27 2.761540
20913 2017   28 2.305910
20967 2017   29 1.810380
21021 2017   30 1.839040
21075 2017   31 1.909590
21129 2017   32 1.859000
21183 2017   33 1.781600
21237 2017   34 1.592080
21291 2017   35 1.690350
21345 2017   36 1.535900
21399 2017   37 1.344950
21453 2017   38 1.338350
21507 2017   39 1.645650
21561 2017   40 1.536260
21615 2017   41 1.094910
21669 2017   42 0.984710
21723 2017   43 0.933866
21777 2017   44 0.946458
21831 2017   45 0.942208
21885 2017   46 0.954801
21939 2017   47 0.947351
21993 2017   48 0.850340
22047 2017   49 1.016550
22101 2017   50 1.350180
22155 2017   51 1.537840
22209 2017   52 1.367260
22263 2017   53 1.303440
22317 2018    1 1.376680
22371 2018    2 1.186360
22425 2018    3 1.287310
22479 2018    4 1.423720
22533 2018    5 1.596790
22587 2018    6 1.736640
22641 2018    7 2.005720
22695 2018    8 2.072870
22749 2018    9 2.259060
22803 2018   10 2.428000
22857 2018   11 2.816360
22911 2018   12 3.098870
22965 2018   13 3.241440
23019 2018   15 3.278290
23073 2018   16 3.141520
23127 2018   17 2.898090
23181 2018   18 2.730510
23235 2018   19 3.212390
23289 2018   20 3.146020
23343 2018   21 3.713870
> #####################################
> #####################################
> 
> flu.data.yr.prev
      YEAR WEEK      ILI
7     2010    1 1.954120
59    2010    2 2.152660
111   2010    3 2.241730
163   2010    4 1.917480
215   2010    5 2.523260
267   2010    6 2.745620
319   2010    7 2.819630
371   2010    8 3.161320
423   2010    9 2.606310
475   2010   10 3.056130
527   2010   11 3.659800
579   2010   12 4.620770
631   2010   13 4.689500
683   2010   15 3.562130
735   2010   16 3.793250
787   2010   17 4.026890
839   2010   18 4.605010
891   2010   19 4.339830
943   2010   20 4.887110
995   2010   21 5.071620
1047  2010   22 5.174020
1099  2010   23 5.000870
1151  2010   24 4.694470
1203  2010   25 4.437900
1255  2010   26 3.297030
1307  2010   27 3.200000
1359  2010   28 2.646830
1411  2010   29 2.571930
1463  2010   30 2.241990
1515  2010   31 2.344360
1567  2010   32 2.146320
1619  2010   33 2.052790
1671  2010   34 2.132850
1723  2010   35 2.106670
1775  2010   36 2.576500
1827  2010   37 2.264240
1879  2010   38 1.847620
1931  2010   39 1.732980
1983  2010   40 1.676840
2035  2010   41 1.687740
2087  2010   42 1.604320
2139  2010   43 1.454370
2191  2010   44 1.351410
2243  2010   45 0.553292
2295  2010   46 1.356880
2347  2010   47 1.163700
2399  2010   48 1.348330
2451  2010   49 1.478570
2503  2010   50 1.602150
2555  2010   51 1.748910
2607  2010   52 1.759940
2659  2010   53 1.847450
2711  2011    1 1.802950
2764  2011    2 2.065340
2817  2011    3 2.382940
2870  2011    4 2.291280
2923  2011    5 2.483580
2976  2011    6 2.174400
3029  2011    7 2.627400
3082  2011    8 2.512160
3135  2011    9 1.685800
3188  2011   10 2.703700
3241  2011   11 3.021350
3294  2011   12 3.607810
3347  2011   13 4.353100
3400  2011   15 3.505890
3453  2011   16 2.942980
3506  2011   17 2.737050
3559  2011   18 3.532470
3612  2011   19 3.853570
3665  2011   20 3.297880
3718  2011   21 3.573430
3771  2011   22 4.205620
3824  2011   23 3.540250
3877  2011   24 2.692660
3930  2011   25 3.124470
3983  2011   26 2.832050
4036  2011   27 3.898860
4089  2011   28 2.991640
4142  2011   29 2.871930
4195  2011   30 2.151020
4248  2011   31 2.153650
4301  2011   32 2.361060
4354  2011   33 2.177780
4407  2011   34 2.045310
4460  2011   35 2.225890
4513  2011   36 2.214390
4566  2011   37 2.015330
4619  2011   38 1.812740
4672  2011   39 2.038140
4725  2011   40 1.875000
4778  2011   41 1.933570
4831  2011   42 1.826610
4884  2011   43 1.693070
4937  2011   44 1.684990
4990  2011   45 1.754220
5043  2011   46 1.614350
5096  2011   47 1.076860
5149  2011   48 1.883680
5202  2011   49 2.015900
5255  2011   50 2.322700
5308  2011   51 2.244500
5361  2011   52 2.439550
5414  2011   53 2.409730
5467  2012    1 2.101330
5520  2012    2 2.265020
5573  2012    3 2.356970
5626  2012    4 2.371770
5679  2012    5 2.457360
5732  2012    6 2.561570
5785  2012    7 2.512090
5838  2012    8 2.730420
5891  2012    9 2.563130
5944  2012   10 2.459370
5997  2012   11 2.708990
6050  2012   12 3.373380
6103  2012   13 5.496210
6156  2012   15 3.623060
6209  2012   16 3.708300
6262  2012   17 4.989230
6315  2012   18 5.839650
6368  2012   19 6.101460
6421  2012   20 5.435700
6474  2012   21 4.869210
6527  2012   22 4.148310
6580  2012   23 3.709490
6633  2012   24 3.983370
6686  2012   25 3.450640
6739  2012   26 3.237000
6792  2012   27 2.962890
6845  2012   28 2.504030
6898  2012   29 1.978290
6951  2012   30 1.826250
7004  2012   31 1.733700
7057  2012   32 1.685600
7110  2012   33 1.625420
7163  2012   34 1.693970
7216  2012   35 1.591790
7269  2012   36 1.523850
7322  2012   37 1.546480
7375  2012   38 1.585670
7428  2012   39 1.591090
7481  2012   40 1.415410
7534  2012   41 1.432550
7587  2012   42 1.250560
7640  2012   43 1.303910
7693  2012   44 1.322400
7746  2012   45 1.228180
7799  2012   46 1.321310
7852  2012   47 1.219460
7905  2012   48 1.193760
7958  2012   49 1.530350
8011  2012   50 1.631640
8064  2012   51 1.705430
8117  2012   52 1.678390
8170  2012   53 1.945810
8223  2013    1 1.524790
8277  2013    2 1.752690
8331  2013    3 1.746620
8385  2013    4 1.779650
8439  2013    5 1.993070
8493  2013    6 2.297740
8547  2013    7 2.291610
8601  2013    8 2.134040
8655  2013    9 2.595580
8709  2013   10 2.325530
8763  2013   11 2.770580
8817  2013   12 3.155700
8871  2013   13 5.104910
8925  2013   15 5.110100
8979  2013   16 4.617440
9033  2013   17 4.572870
9087  2013   18 5.048720
9141  2013   19 4.287070
9195  2013   20 3.837810
9249  2013   21 3.462350
9303  2013   22 3.387190
9357  2013   23 3.039550
9411  2013   24 2.721340
9465  2013   25 2.313750
9519  2013   26 2.396880
9573  2013   27 1.992610
9627  2013   28 2.013780
9681  2013   29 1.846370
9735  2013   30 1.872910
9789  2013   31 1.833020
9843  2013   32 1.692410
9897  2013   33 1.728030
9951  2013   34 1.802060
10005 2013   35 2.083800
10059 2013   36 1.864480
10113 2013   37 1.880640
10167 2013   38 1.805840
10221 2013   39 1.771550
10275 2013   40 1.764790
10329 2013   41 1.806660
10383 2013   42 1.493650
10437 2013   43 1.488580
10491 2013   44 1.265230
10545 2013   45 1.278470
10599 2013   46 1.057090
10653 2013   47 1.057140
10707 2013   48 1.204470
10761 2013   49 1.315740
10815 2013   50 1.582830
10869 2013   51 1.871740
10923 2013   52 1.869480
10977 2013   53 1.786560
11031 2014    1 1.908900
11085 2014    2 2.018720
11139 2014    3 1.881580
11193 2014    4 1.841970
11247 2014    5 1.886030
11301 2014    6 2.229640
11355 2014    7 2.217970
11409 2014    8 2.489840
11463 2014    9 2.727180
11517 2014   10 2.409360
11571 2014   11 2.577370
11625 2014   12 2.903690
11679 2014   13 4.477290
11733 2014   14 4.771280
11787 2014   15 3.996830
11841 2014   16 4.331410
11895 2014   17 4.880050
11949 2014   18 5.010630
12003 2014   19 4.505000
12057 2014   20 4.009400
12111 2014   21 3.446320
12165 2014   22 3.173110
12219 2014   23 3.073020
12273 2014   24 3.176450
12327 2014   25 2.952800
12381 2014   26 2.656240
12435 2014   27 2.655000
12489 2014   28 2.398510
12543 2014   29 2.118010
12597 2014   30 2.135280
12651 2014   31 2.148160
12705 2014   32 2.228590
12759 2014   33 2.265050
12813 2014   34 2.109430
12867 2014   35 2.076540
12921 2014   36 2.177390
12975 2014   37 1.960650
13029 2014   38 1.868780
13083 2014   39 1.659020
13137 2014   40 1.640780
13191 2014   41 1.489100
13245 2014   42 1.270190
13299 2014   43 1.076180
13353 2014   44 1.075270
13407 2014   45 1.060280
13461 2014   46 1.223210
13515 2014   47 1.155950
13569 2014   48 1.303530
13623 2014   49 1.262810
13677 2014   50 0.909243
13731 2014   51 1.407900
13785 2014   52 1.346360
13839 2014   53 1.212460
13893 2015    1 1.380640
13947 2015    2 1.566100
14001 2015    3 1.504110
14055 2015    4 1.617720
14109 2015    5 1.735890
14163 2015    6 1.808130
14217 2015    7 2.140970
14271 2015    8 2.398660
14325 2015    9 2.022730
14379 2015   10 2.071010
14433 2015   11 2.170170
14487 2015   12 2.913330
14541 2015   13 3.277220
14595 2015   15 2.501800
14649 2015   16 2.470390
14703 2015   17 2.689710
14757 2015   18 2.833280
14811 2015   19 3.284070
14865 2015   20 3.914390
14919 2015   21 4.396190
14973 2015   22 3.731430
15027 2015   23 3.637240
15081 2015   24 3.694420
15135 2015   25 3.192830
15189 2015   26 2.992620
15243 2015   27 2.809270
15297 2015   28 2.116520
15351 2015   29 1.924030
15405 2015   30 1.628520
15459 2015   31 1.735970
15513 2015   32 1.849020
15567 2015   33 1.530590
15621 2015   34 1.486810
15675 2015   35 1.443990
15729 2015   36 1.378650
15783 2015   37 1.366710
15837 2015   38 1.264400
15891 2015   39 1.158670
15945 2015   40 1.219860
15999 2015   41 1.146080
16053 2015   42 1.045730
16107 2015   43 0.904141
16161 2015   44 0.856349
16215 2015   45 0.851270
16269 2015   46 0.896093
16323 2015   47 1.009940
16377 2015   48 1.047090
16431 2015   49 1.309930
16485 2015   50 1.362730
16539 2015   51 1.717080
16593 2015   52 1.783980
16647 2015   53 1.657030
16701 2016    1 1.252880
16755 2016    2 1.392910
16809 2016    3 1.516310
16863 2016    4 1.523830
16917 2016    5 1.576190
16971 2016    6 1.746940
17025 2016    7 1.776800
17079 2016    8 2.144590
17133 2016    9 2.007730
17187 2016   10 2.074840
17241 2016   11 2.375250
17295 2016   12 2.878290
17349 2016   13 3.526080
17403 2016   15 3.266700
17457 2016   16 2.999500
17511 2016   17 2.777990
17565 2016   18 3.115720
17619 2016   19 3.192020
17673 2016   20 2.694190
17727 2016   21 2.523410
17781 2016   22 2.388540
17835 2016   23 2.145930
17889 2016   24 2.170890
17943 2016   25 2.335980
17997 2016   26 1.959790
18051 2016   27 1.965210
18105 2016   28 1.739820
18159 2016   29 1.595890
18213 2016   30 1.629940
18267 2016   31 1.661800
18321 2016   32 1.463710
18375 2016   33 1.433260
18429 2016   34 1.424500
18483 2016   35 1.391170
18537 2016   36 1.399930
18591 2016   37 1.615900
18645 2016   38 1.283800
18699 2016   39 1.252370
18753 2016   40 1.396570
18807 2016   41 1.312370
18861 2016   42 1.124250
18915 2016   43 1.093870
18969 2016   44 0.979101
19023 2016   45 0.853916
19077 2016   46 0.936918
19131 2016   47 1.012720
19185 2016   48 1.137870
19239 2016   49 1.198910
19293 2016   50 1.280880
19347 2016   51 1.547000
19401 2016   52 1.521050
19455 2016   53 1.556260
19509 2017    1 1.754210
19563 2017    2 1.535340
19617 2017    3 1.567140
19671 2017    4 1.723250
19725 2017    5 1.983550
19779 2017    6 1.908510
19833 2017    7 1.998010
19887 2017    8 2.218900
19941 2017    9 1.949180
19995 2017   10 2.498130
20049 2017   11 3.391790
20103 2017   12 4.588910
20157 2017   13 6.842450
20211 2017   15 6.665130
20265 2017   16 4.691230
20319 2017   17 3.935920
20373 2017   18 3.897790
20427 2017   19 4.258720
20481 2017   20 3.819010
20535 2017   21 3.714030
20589 2017   22 3.511020
20643 2017   23 3.648570
20697 2017   24 3.393030
20751 2017   25 3.210070
20805 2017   26 2.957900
20859 2017   27 2.761540
20913 2017   28 2.305910
20967 2017   29 1.810380
21021 2017   30 1.839040
21075 2017   31 1.909590
21129 2017   32 1.859000
21183 2017   33 1.781600
21237 2017   34 1.592080
21291 2017   35 1.690350
21345 2017   36 1.535900
21399 2017   37 1.344950
21453 2017   38 1.338350
21507 2017   39 1.645650
21561 2017   40 1.536260
21615 2017   41 1.094910
21669 2017   42 0.984710
21723 2017   43 0.933866
21777 2017   44 0.946458
21831 2017   45 0.942208
21885 2017   46 0.954801
21939 2017   47 0.947351
21993 2017   48 0.850340
22047 2017   49 1.016550
22101 2017   50 1.350180
22155 2017   51 1.537840
22209 2017   52 1.367260
22263 2017   53 1.303440
22317 2018    1 1.376680
22371 2018    2 1.186360
22425 2018    3 1.287310
22479 2018    4 1.423720
22533 2018    5 1.596790
22587 2018    6 1.736640
22641 2018    7 2.005720
22695 2018    8 2.072870
22749 2018    9 2.259060
22803 2018   10 2.428000
22857 2018   11 2.816360
22911 2018   12 3.098870
22965 2018   13 3.241440
23019 2018   15 3.278290
23073 2018   16 3.141520
23127 2018   17 2.898090
23181 2018   18 2.730510
23235 2018   19 3.212390
23289 2018   20 3.146020
23343 2018   21 3.713870
> tmp.pk.week <- 
+ lapply(min(flu.data.yr.prev$YEAR) : max(flu.data.yr.prev$YEAR), function(yr){
+   flu.data.yr.prev$WEEK[which(flu.data.yr.prev$YEAR==yr & flu.data.yr.prev$ILI >= -0.1+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]) & flu.data.yr.prev$ILI <= 0.1+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]))]
+ })
> 
> years <- min(flu.data.yr.prev$YEAR) : max(flu.data.yr.prev$YEAR)
> flu.data.yr.prev.pk.wk <- vector()
> for(ii in 1:length(tmp.pk.week)){
+   for(kk in 1:length(tmp.pk.week[[ii]])){
+     flu.data.yr.prev.pk.wk <- rbind(flu.data.yr.prev.pk.wk, c(years[ii], tmp.pk.week[[ii]][kk]))
+   }
+ }
> 
> 
> tmp.pk.prev <- 
+ lapply(min(flu.data.yr.prev$YEAR) : max(flu.data.yr.prev$YEAR), function(yr){
+   flu.data.yr.prev$ILI[which(flu.data.yr.prev$YEAR==yr & flu.data.yr.prev$ILI >= -0.1+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]) & flu.data.yr.prev$ILI <= 0.1+max(flu.data.yr.prev$ILI[flu.data.yr.prev$YEAR==yr]))]
+ })
> 
> years <- min(flu.data.yr.prev$YEAR) : max(flu.data.yr.prev$YEAR)
> flu.data.yr.prev.pk.prev <- vector()
> for(ii in 1:length(tmp.pk.prev)){
+   for(kk in 1:length(tmp.pk.prev[[ii]])){
+     flu.data.yr.prev.pk.prev <- rbind(flu.data.yr.prev.pk.prev, c(years[ii], tmp.pk.prev[[ii]][kk]))
+   }
+ }
> 
> 
> 
> ##########################################################
> ##########################################################
> ##########################################################
> 
> ################################################################
> ############# Logistic Regression ##############################
> ################################################################
> sim.forecast.ili.LIST <- list()
> for(j in 1:50){
+ 
+ err.ILI.cv <- -Inf
+ while(sum(is.infinite(err.ILI.cv))>0 | sum(is.na(err.ILI.cv)) >0){
+ 
+ X.input <- data.frame(year=flu.data.wk.prev$YEAR, week=flu.data.wk.prev$WEEK)
+ Y.output <- data.frame(ili=flu.data.wk.prev$ILI)
+ 
+ head(X.input)
+ tail(X.input)
+ head(Y.output)
+ tail(Y.output)
+ 
+ id.random <- which(X.input$year>=1997)
+ #id.random <- which(X.input$year>=2010)
+ #id.random <- which(X.input$year>=2011)
+ id.random <- sample(id.random, length(id.random))
+ #id.random <- sample(1:length(id.random), length(id.random))
+ id.test <- which(X.input$year>=2015)
+ 
+ id.random1 <- id.random[1:floor(length(id.random)*0.8)]
+ id.random2 <- id.random[floor(length(id.random)*0.8):length(id.random)]
+ 
+ scale <- 10 # 1: 130 bins, 10: 1300 bins
+ 
+ ### training data set and Standardization/Rescaling ###
+ #X.data <- X.input[id.random1,] 
+ X.data <- as.data.frame(X.input[id.random1,-1] )
+ X.mean <- sapply(X.data, mean)
+ X.sd <- sapply(X.data, sd)
+ X.min <- sapply(X.data, min)
+ X.max <- sapply(X.data, max)
+ X.data <- sapply(X.data, function(tmp)(tmp-mean(tmp))/sd(tmp)) # Standardization
+ #X.data <- sapply(X.data, function(tmp)(tmp-min(tmp))/(max(tmp)-min(tmp))) # Rescaling
+ ##############################################
+ 
+ ### test data set ###
+ #X.input[id.2011,]$year <- 2020
+ #X.input[id.2011,]$year <- 2011
+ #X.input[id.2011,]$year <- 2012
+ #X.input[id.2011,]$year <- 2015
+ X.test <- t(sapply(1:length(id.test),function(k)(X.input[id.test[k],-1]-X.mean)/X.sd)) # Standardization
+ #X.test <- t(sapply(1:length(id.test),function(k)(X.input[id.test[k],]-X.mean)/X.sd)) # Standardization
+ 
+ X.test <- (t(X.test)) # if input is week only
+ X.test <- cbind(rep(1,nrow(X.test)), X.test)
+ X.test <- matrix(unlist(X.test), nrow(X.test), ncol(X.test))
+ 
+ ## X.forecast <- tail(X.input[,],4)
+ ## X.forecast$year <- 2016
+ ## X.forecast$week <- wkID
+ 
+ X.forecast <- tail(X.input[,-1],4)
+ X.forecast <- wkID
+ 
+ X.forecast <- as.matrix(X.forecast)
+ X.forecast <- t(sapply(1:4,function(k)(X.forecast[k,]-X.mean)/X.sd)) # Standardization
+ 
+ X.forecast <- (t(X.forecast)) # if input is week only
+ X.forecast <- cbind(rep(1,nrow(X.forecast)), X.forecast)
+ X.forecast <- matrix(unlist(X.forecast), nrow(X.forecast), ncol(X.forecast))
+ 
+ #####################
+ 
+ ### cross valication data set ###
+ X.cv <- t(sapply(1:length(id.random2),function(k)(X.input[id.random2[k],-1]-X.mean)/X.sd)) # Standardization
+ #X.cv <- t(sapply(1:length(id.random2),function(k)(X.input[id.random2[k],]-X.mean)/X.sd)) # Standardization
+ 
+ X.cv <- t(X.cv) # if input is week only
+ X.cv <- cbind(rep(1,nrow(X.cv)), X.cv)
+ X.cv <- matrix(unlist(X.cv), nrow(X.cv), ncol(X.cv))
+ #####################
+ 
+ ### initialize paraemters and variables ###
+ Theta <- matrix(rep(0, 1+ncol(X.data)), 1+ncol(X.data), 1)
+ X <- matrix( unlist(cbind(rep(1, nrow(X.data)),X.data)), nrow(X.data), 1+ncol(X.data))
+ 
+ Y.data <- floor(scale*Y.output$ili[id.random1]) == 0
+ Y <- matrix(Y.data*scale, nrow=length(id.random1), ncol=1)
+ 
+ m <- nrow(X) # number of examples
+ lambda <- 0.01 # regularization param, under fit if too large, over fit if to small
+ 
+ J <- 0
+ Theta.grad <- rep(0, length(Theta)) # initial parameter Thata
+ ###########################################
+ 
+ ### hypothesis function ###
+ hypo <- function(Theta){
+   1/(1+exp(-1*(X %*% Theta))) # hypothesis function
+ }
+ #h.prob <- hypo(Theta) 
+ ###########################
+ 
+ ### cost function ###
+ cost.fn <- function(Theta){
+   h.prob <- hypo(Theta) # hypothesis function
+   J <- sum(Y * -log(h.prob) + (1-Y) * (-log(1-h.prob)))/m # cost function
+   J <- J + sum(lambda/(2*m)*(Theta[-1])^2) # regularization term
+   return(J)
+ }
+ #####################
+ 
+ ### gradient function ###
+ grad.fn <- function(Theta){
+   h.prob <- hypo(Theta) # hypothesis function
+   Theta.grad <- apply(X, 2, function(xj)sum((h.prob - Y) * xj)/m) # dCost/dTheta
+   Theta.grad <- Theta.grad + c(0, lambda/m * Theta[-1]) # regularization term
+   return(Theta.grad)
+ }
+ ########################
+ 
+ ## forecast function ###
+ forecast <- function(Theta, X){
+   1/(1+exp(-1*(X %*% Theta))) 
+ }
+ ########################
+ 
+ ## forecast Error function ###
+ cost.ERR <- function(Theta, X, Y){
+   h.prob <- forecast(Theta, X) # hypothesis function
+   J <- sum(Y * -log(h.prob) + (1-Y) * (-log(1-h.prob)))/nrow(X) # cost function
+   return(J)
+ }
+ ########################
+ 
+ ################################################################
+ ################################################################
+ ################################################################
+ ILI.Theta <- list()
+ err.ILI.train <- vector()
+ err.ILI.cv <- vector()
+ 
+ for( i in (-5:11)){# big loop
+ lambda <- (2^(i/1))/100
+ ##############################################
+ ###### ILI prediction using test-dataset ######
+ ##############################################
+ Theta.all <- vector()
+ system.time(
+ for(kk in 0:130){
+   Y.data <- floor(scale*Y.output$ili[id.random1]) == kk
+   #Y <- matrix(Y.data*scale, nrow=length(id.random1), ncol=1)
+   Y <- matrix(Y.data, nrow=length(id.random1), ncol=1)
+   Theta.optm <- optim(par=Theta, fn=cost.fn, gr=grad.fn, method="BFGS")
+   #Theta.optm <- optim(par=Theta, fn=cost.fn, method="Nelder-Mead")
+   Theta.optm <- Theta.optm$par
+   Theta.all <- cbind(Theta.all, Theta.optm)
+ }
+ )
+ 
+ ILI.Theta <- c(ILI.Theta, list(Theta.all))
+ 
+ err.ILI.tmp <- vector()
+ for(kk in 0:130){
+   Y.data <- floor(scale*Y.output$ili[id.random1]) == kk
+   #Y <- matrix(Y.data*scale, nrow=length(id.random1), ncol=1)
+   Y <- matrix(Y.data*1, nrow=length(id.random1), ncol=1)
+   tmp <- cost.ERR(Theta.all[,(kk+1)], X, Y)
+   err.ILI.tmp <- c(err.ILI.tmp, tmp)
+ }
+ err.ILI.train <- c(err.ILI.train, sum(err.ILI.tmp))
+ 
+ err.ILI.cv.tmp <- vector()
+ for(kk in 0:130){
+   Y.data.cv <- floor(scale*Y.output$ili[id.random2]) == kk
+   #Y.cv <- matrix(Y.data.cv*scale, nrow=length(id.random2), ncol=1)
+   Y.cv <- matrix(Y.data.cv*1, nrow=length(id.random2), ncol=1)
+   tmp <- cost.ERR(Theta.all[,(kk+1)], X.cv, Y.cv)
+   err.ILI.cv.tmp <- c(err.ILI.cv.tmp, tmp)
+ }
+ err.ILI.cv <- c(err.ILI.cv, sum(err.ILI.cv.tmp))
+ 
+ ##############################################
+ ##############################################
+ ##############################################
+ 
+ }# big loop
+ 
+ } # end of while()
+ 
+ D <- length(err.ILI.train) - 1
+ total.cost <- c(err.ILI.train, err.ILI.cv)
+ plot(2^(0:D)/100, err.ILI.cv, type="l", ylim=c(min(total.cost), max(total.cost)), col="green", xlab="lambda", ylab="cost")
+ lines(2^(0:D)/100, err.ILI.train, type="l", col="red")
+ 
+ lambda.ili.id <- which((err.ILI.cv) == min(err.ILI.cv))[1]
+ 
+ #lambda.ili.id <- which((err.ILI.cv+err.ILI.train) == min(err.ILI.cv+err.ILI.train))[1]
+ 
+ #lambda.tf.id <- which((err.TF.cv+err.TT.cv) == min(err.TF.cv+err.TT.cv))
+ #lambda.tt.id <- which((err.TF.cv+err.TT.cv) == min(err.TF.cv+err.TT.cv))
+ 
+ ##############################################
+ ##############################################
+ ##############################################
+ ### forecasts of test data 2014/2015, 2015/2016
+ sim.test.ili <- vector()
+ for(k in 1:length(id.test)){
+   tmp <- c(forecast(ILI.Theta[[lambda.ili.id]], X.test[k,]))
+   sim.test.ili <- cbind(sim.test.ili, tmp/sum(tmp))
+ }
+ 
+ ## ILI
+ sim.test.ili.avg <- apply(sim.test.ili, 1, mean)
+ 
+ ili.mean.lr <- sum(sim.test.ili.avg*c(0:130))/scale
+ ili.loglik.lr <- sum(log(sim.test.ili.avg[1+floor(scale*Y.output$ili[id.test])]))
+ 
+ ili.mean.true <- mean(Y.output$ili[id.test])
+ 
+ plot.ILI <- function(){
+ plot((0:130)/10, sim.test.ili[,1], type="l", main="TEST: CA flu seasons 2015/2016, 2016/2018", xlab="%ILI", ylab="density", ylim=c(0,0.1))
+ abline(v=(scale*Y.output$ili[id.test])/10, col="grey")
+ sapply(1:ncol(sim.test.ili),function(kk)lines((0:130)/10, sim.test.ili[,kk], type="l"))
+ }
+ 
+ ### forecasts of test data 2016/2018
+ sim.forecast.ili <- vector()
+ for(k in 1:nrow(X.forecast)){
+   tmp <- c(forecast(ILI.Theta[[lambda.ili.id]], X.forecast[k,]))
+   sim.forecast.ili <- cbind(sim.forecast.ili, tmp/sum(tmp))
+ }
+ 
+ plot.ILI.forecast <- function(){
+ plot((0:130)/10, sim.forecast.ili[,1], type="l", main="FORECAST: CA flu seasons 2018/2019 1-4 weeks", xlab="%ILI", ylab="density", ylim=c(0,0.1))
+ sapply(1:ncol(sim.forecast.ili),function(kk)lines((0:130)/10, sim.forecast.ili[,kk], type="l"))
+ }
+ 
+ sum(sim.forecast.ili[,1]*(0:130))
+ ##############################
+ ###### plot results ##########
+ ##############################
+ 
+ png("./plots/CA 1-4 week forecast.png",width=6,height=8,units="in",res=150)
+ 
+ par(mfrow = c(3,1))
+ plot(2^(0:D)/100, err.ILI.cv, type="l", col="green", xlab="lambda", ylab="cost", ylim=c(min(c(err.ILI.cv, err.ILI.train)), max(c(err.ILI.cv, err.ILI.train))))
+ lines(2^(0:D)/100, err.ILI.train, type="l", col="red")
+ legend("bottomright", c("training Error","cross validation Error"), lty=1, col=c("red", "green"))
+ plot.ILI()
+ plot.ILI.forecast()
+ 
+ dev.off()
+ ##############################
+ ##############################
+ ##############################
+ 
+ sim.forecast.ili.LIST <- c(sim.forecast.ili.LIST, list(sim.forecast.ili))
+ } # external for-loop
> 
> tmp <- sim.forecast.ili.LIST[[1]]
> for(i in 2:length(sim.forecast.ili.LIST)){
+   tmp <- tmp + sim.forecast.ili.LIST[[i]]
+ }
> 
> sim.forecast.ili <- tmp/length(sim.forecast.ili.LIST)
> 
> avg.ili <- sapply(1:length(sim.forecast.ili.LIST), function(k)apply(sim.forecast.ili.LIST[[k]], 2, function(x)sum(x*(0:130))))
> 
> data.smooth <- 
+ sapply(1:ncol(sim.forecast.ili), function(k){
+ tmp.mean <- sum(c(0:130)/10*sim.forecast.ili[,k])
+ #tmp.sd <- sd(sample(x=(0:130)/10, 10000, replace=T, prob=sim.forecast.ili[,k]))/2
+ tmp.sd <- sd(sample(x=(0:130)/10, 10000, replace=T, prob=sim.forecast.ili[,k]))/1
+ tmp <- dnorm(x=(0:130)/10, mean=tmp.mean, sd=tmp.sd)
+ tmp/sum(tmp)
+ })
> 
> national4wks <- read.csv("national1-4wk.forecast.template.csv")
> head(national4wks)
     Location     Target  Type    Unit Bin_start_incl Bin_end_notincl
1 US National 1 wk ahead Point percent             NA              NA
2 US National 1 wk ahead   Bin percent            0.0             0.1
3 US National 1 wk ahead   Bin percent            0.1             0.2
4 US National 1 wk ahead   Bin percent            0.2             0.3
5 US National 1 wk ahead   Bin percent            0.3             0.4
6 US National 1 wk ahead   Bin percent            0.4             0.5
        Value
1 1.500000000
2 0.007633588
3 0.007633588
4 0.007633588
5 0.007633588
6 0.007633588
> national4wks$Location <- paste("California",sep="")
> nrow(national4wks)
[1] 528
> 
> national4wks$Value[1] <- signif(sum((0:130)*sim.forecast.ili[,1])/10, 2)
> national4wks$Value[1+132] <- signif(sum((0:130)*sim.forecast.ili[,2])/10, 2)
> national4wks$Value[1+132+132] <- signif(sum((0:130)*sim.forecast.ili[,3])/10, 2)
> national4wks$Value[1+132+132+132] <- signif(sum((0:130)*sim.forecast.ili[,4])/10, 2)
> 
> national4wks$Value[(2):(2+130)] <- signif(sim.forecast.ili[,1],2)
> national4wks$Value[(2+130+2):(2+130+2+130)] <- signif(sim.forecast.ili[,2],2)
> national4wks$Value[(2+130+2+130+2):(2+130+2+130+2+130)] <- signif(sim.forecast.ili[,3],2)
> national4wks$Value[(2+130+2+130+2+130+2):(2+130+2+130+2+130+2+130)] <- signif(sim.forecast.ili[,4],2)
> 
> head(national4wks)
    Location     Target  Type    Unit Bin_start_incl Bin_end_notincl   Value
1 California 1 wk ahead Point percent             NA              NA 3.4e+00
2 California 1 wk ahead   Bin percent            0.0             0.1 3.5e-08
3 California 1 wk ahead   Bin percent            0.1             0.2 3.5e-08
4 California 1 wk ahead   Bin percent            0.2             0.3 3.5e-08
5 California 1 wk ahead   Bin percent            0.3             0.4 3.5e-08
6 California 1 wk ahead   Bin percent            0.4             0.5 3.5e-08
> 
> write.csv(national4wks, "./output/ca4wks.csv", row.names=F)
> 
> 
> for(k in 1:ncol(sim.forecast.ili)){
+   sim.forecast.ili[,k] <- data.smooth[,k]
+ }
> 
> national4wks <- read.csv("national1-4wk.forecast.template.csv")
> head(national4wks)
     Location     Target  Type    Unit Bin_start_incl Bin_end_notincl
1 US National 1 wk ahead Point percent             NA              NA
2 US National 1 wk ahead   Bin percent            0.0             0.1
3 US National 1 wk ahead   Bin percent            0.1             0.2
4 US National 1 wk ahead   Bin percent            0.2             0.3
5 US National 1 wk ahead   Bin percent            0.3             0.4
6 US National 1 wk ahead   Bin percent            0.4             0.5
        Value
1 1.500000000
2 0.007633588
3 0.007633588
4 0.007633588
5 0.007633588
6 0.007633588
> national4wks$Location <- paste("California",sep="")
> nrow(national4wks)
[1] 528
> 
> national4wks$Value[1] <- signif(sum((0:130)*sim.forecast.ili[,1])/10, 2)
> national4wks$Value[1+132] <- signif(sum((0:130)*sim.forecast.ili[,2])/10, 2)
> national4wks$Value[1+132+132] <- signif(sum((0:130)*sim.forecast.ili[,3])/10, 2)
> national4wks$Value[1+132+132+132] <- signif(sum((0:130)*sim.forecast.ili[,4])/10, 2)
> 
> national4wks$Value[(2):(2+130)] <- signif(sim.forecast.ili[,1],2)
> national4wks$Value[(2+130+2):(2+130+2+130)] <- signif(sim.forecast.ili[,2],2)
> national4wks$Value[(2+130+2+130+2):(2+130+2+130+2+130)] <- signif(sim.forecast.ili[,3],2)
> national4wks$Value[(2+130+2+130+2+130+2):(2+130+2+130+2+130+2+130)] <- signif(sim.forecast.ili[,4],2)
> 
> head(national4wks)
    Location     Target  Type    Unit Bin_start_incl Bin_end_notincl   Value
1 California 1 wk ahead Point percent             NA              NA 3.4e+00
2 California 1 wk ahead   Bin percent            0.0             0.1 3.5e-14
3 California 1 wk ahead   Bin percent            0.1             0.2 1.8e-13
4 California 1 wk ahead   Bin percent            0.2             0.3 8.9e-13
5 California 1 wk ahead   Bin percent            0.3             0.4 4.2e-12
6 California 1 wk ahead   Bin percent            0.4             0.5 1.9e-11
> 
> write.csv(national4wks, "./output/ca4wksSMOOTH.csv", row.names=F)
> 
> 
> 
> 
> flu.data.wk.prev$ILI[flu.data.wk.prev$YEAR==2018]
[1] 3.21239 3.14602 3.71387 3.53754
> 
> projection <- apply(avg.ili,2, function(x)c(flu.data.wk.prev$ILI[flu.data.wk.prev$YEAR==2018], x/10))
> png("./plots/forecastCA.png")
> plot((head(wkID,1)-3):(tail(wkID,1)), projection[,1], lty=2,type="l", col="grey", xlab="wk", ylab="ILI%", ylim=c(0.2,7) , main="CA 1-4 wk ahead", xaxt="n")
Error in xy.coords(x, y, xlabel, ylabel, log) : 
  'x' and 'y' lengths differ
Calls: plot -> plot.default -> xy.coords
Execution halted
